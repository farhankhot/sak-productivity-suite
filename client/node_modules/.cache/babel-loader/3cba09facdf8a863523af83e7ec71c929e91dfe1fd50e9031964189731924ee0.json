{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/farha/OneDrive/Documents/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/farha/OneDrive/Documents/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/farha/OneDrive/Documents/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{useNavigate}from'react-router-dom';import{CheckJobStatus}from\"./CheckJobStatus.js\";import Button from'react-bootstrap/Button';import{ButtonGroup,ListGroup}from'react-bootstrap';import Container from'react-bootstrap/Container';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Home(props){var sessionId=props.sessionId;console.log(\"Home sessionId: \",sessionId);// ========= Need to get this information, for now backend is not returning it ============\n// const [summary, setSummary] = useState(\"\");\n// const [skills, setSkills] = useState(\"\");\n// ========= Need to get this information, for now backend is not returning it ============\n// const [noteTextArea, setNoteTextArea] = useState(\"\"); \n// const [peopleInterestsArray, setPeopleInterestsArray] = useState([]);\t\n// const [companyInterestsArray, setCompanyInterestsArray] = useState([]);\t\n// const [activityInterestsArray, setActivityInterestsArray] = useState([]);\n// const [selectedInterests, setSelectedInterests] = useState(\"\");\n// const [isLoading, setIsLoading] = useState(false);\n// const [showProfileArea, setShowProfileArea] = useState(false);\n// const [leadInfoArray, setleadInfoArray] = useState([]);\n// const [selectedName, setSelectedName] = useState(\"\");\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),leadsArray=_useState2[0],setLeadsArray=_useState2[1];// TODO: show leads, create List group of leads\n// Have a button that gets all of the interests and creates connect note\n// Save leads to database\nvar handleGettingLeads=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"https://sak-productivity-suite.herokuapp.com/get-leads\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({sessionId:sessionId})});case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;console.log(\"Successfully gotten leads: \",data.message);setLeadsArray(data.message);_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 14:case\"end\":return _context.stop();}},_callee,null,[[0,11]]);}));return function handleGettingLeads(){return _ref.apply(this,arguments);};}();useEffect(function(){// Change temp to JSON \nvar temp=[];for(var i=0;i<leadsArray.length;i+=1){temp.push([leadsArray[i][\"full_name\"],leadsArray[i][\"latest_title\"]+\"at \"+leadsArray[i][\"latest_title_company\"],leadsArray[i][\"geo_region\"],leadsArray[i][\"member_urn_id\"]]);}setLeadsArray(temp);},[leadsArray]);// const handleGettingPeopleInterests = async (sessionId, profileUrn) => {\n// \tsetIsLoading(true);\n// \ttry {\n// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: {\n// \t\t\t\t\"Content-Type\": \"application/json\"\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({\n// \t\t\t\tsessionId: sessionId,\n// \t\t\t\tprofileUrn: profileUrn\n// \t\t\t})\n// \t\t});\n// \t\tconst data = await response.json();\t\t\t\n// \t\tconst jobId = data.message;\n// \t\tCheckJobStatus(jobId, (peopleInterestsArray) => {\n// \t\t\tsetIsLoading(false);\n// \t\t\tsetPeopleInterestsArray(peopleInterestsArray);\t\n// \t\t});\n// \t} catch (error) {\n// \t\tconsole.error(error);\n// \t}\n// };\n// const handleGettingCompanyInterests = async (sessionId, profileUrn, publicId) => {\n// \tsetIsLoading(true);\n// \ttry {\n// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: {\n// \t\t\t\t\"Content-Type\": \"application/json\"\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({\n// \t\t\t\tsessionId: sessionId,\n// \t\t\t\tprofileUrn: profileUrn,\n// \t\t\t\tpublicId: publicId\n// \t\t\t})\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconst jobId = data.message;\n// \t\tCheckJobStatus(jobId, (companyInterestsArray) => {\n// \t\t\tsetIsLoading(false);\n// \t\t\tsetCompanyInterestsArray(companyInterestsArray);\t\n// \t\t});\n// \t} catch (error) {\n// \t\tconsole.error(error);\n// \t}\n// };\n// // const handleGettingActivityInterests = () => {\n// \t// // TODO\n// // };\n// const handleInterestsSelection = (event) => {\n// \tvar selections = event.target.options;\n// \tconst updatedInterestsArray = [];\n// \tfor (var i = 0; i < selections.length; i++){\n// \t\tif(selections[i].selected){\n// \t\t\tupdatedInterestsArray.push(selections[i].value);\n// \t\t}\n// \t}\n// \tsetSelectedInterests(updatedInterestsArray);\n// }\n// const handleMakingConnectNote = async (fullName) => {\n// \tconst prompt = \"This is the profile of a person: \" + \"\\n\" + fullName \n// \t+ \" This is their summary: \" +\n// \t\" These are their interests: \" + selectedInterests \n// \t+ \" Use the internet to get something useful about the interests and use it in the request. \"\n// \t+ \" Write a request to connect with them. Make it casual but eyecatching. The goal is to ask about their current Salesforce implementation. The length should be no more than 300 characters.\";\n// \tsetIsLoading(true);\n// \ttry {\n// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: {\n// \t\t\t\t\"Content-Type\": \"application/json\"\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({\n// \t\t\t\tprompt: prompt\n// \t\t\t})\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconst jobId = data.message;\n// \t\tCheckJobStatus(jobId, (resultArray) => {\n// \t\t\tsetIsLoading(false);\n// \t\t\tsetNoteTextArea(resultArray);\t\n// \t\t});\n// \t}catch(error){\n// \t\tconsole.log(error);\n// \t}\n// };\n// const handleSendingConnectNote = async (sessionId, profileId) => {\n// \ttry {\n// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-connect\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: {\n// \t\t\t\t\"Content-Type\": \"application/json\"\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({\n// \t\t\t\tsessionId: sessionId,\n// \t\t\t\tprofileId: profileId,\n// \t\t\t\ttext: noteTextArea\n// \t\t\t})\n// \t\t});\n// \t\tconst data = await response.json();\n// \t\tconsole.log(\"Successfully sent the connect note to the person\", data.message);\n// \t}catch(error){\n// \t\tconsole.log(error);\n// \t}\n// };\n// const handleNoteTextAreaChange = (event) => {\n// \tsetNoteTextArea(event.target.value);\n// };\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"button\",onClick:handleGettingLeads,children:\"Get Leads\"}),/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Search Results:\"}),/*#__PURE__*/_jsx(ListGroup,{children:leadsArray.map(function(leadInfo){return/*#__PURE__*/_jsxs(ListGroup.Item,{action:true,onClick:function onClick(){setShowProfileArea(true);setSelectedName(leadInfo[0]);},children:[leadInfo[0],\", \",leadInfo[1]]});})})]})]});}export default Home;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","CheckJobStatus","Button","ButtonGroup","ListGroup","Container","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Home","props","sessionId","console","log","_useState","_useState2","_slicedToArray","leadsArray","setLeadsArray","handleGettingLeads","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_callee$","_context","prev","next","fetch","method","headers","body","JSON","stringify","sent","json","message","t0","stop","apply","arguments","temp","i","length","push","children","variant","type","onClick","map","leadInfo","Item","action","setShowProfileArea","setSelectedName"],"sources":["C:/Users/farha/OneDrive/Documents/sak-productivity-suite/client/src/Home.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Home(props) {\r\n\tconst {sessionId} = props;\r\n\tconsole.log(\"Home sessionId: \", sessionId);\r\n\r\n\t// ========= Need to get this information, for now backend is not returning it ============\r\n\t// const [summary, setSummary] = useState(\"\");\r\n\t// const [skills, setSkills] = useState(\"\");\r\n\t// ========= Need to get this information, for now backend is not returning it ============\r\n\t\r\n\t// const [noteTextArea, setNoteTextArea] = useState(\"\"); \r\n\t\r\n\t// const [peopleInterestsArray, setPeopleInterestsArray] = useState([]);\t\r\n\t// const [companyInterestsArray, setCompanyInterestsArray] = useState([]);\t\r\n\t// const [activityInterestsArray, setActivityInterestsArray] = useState([]);\r\n\t// const [selectedInterests, setSelectedInterests] = useState(\"\");\r\n\t\r\n\t// const [isLoading, setIsLoading] = useState(false);\r\n\r\n\t// const [showProfileArea, setShowProfileArea] = useState(false);\r\n\t// const [leadInfoArray, setleadInfoArray] = useState([]);\r\n\r\n\t// const [selectedName, setSelectedName] = useState(\"\");\r\n\r\n\tconst [leadsArray, setLeadsArray] = useState([]);\r\n\r\n    // TODO: show leads, create List group of leads\r\n    // Have a button that gets all of the interests and creates connect note\r\n    // Save leads to database\r\n\t\t\r\n\tconst handleGettingLeads = async() => {\r\n        try {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-leads\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(\"Successfully gotten leads: \", data.message);\r\n            setLeadsArray(data.message);\r\n\t\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\t\r\n\t};\r\n\t\r\n\tuseEffect(() => {\r\n\t\t// Change temp to JSON \r\n\t\tconst temp = []\r\n\t\tfor (let i = 0; i < leadsArray.length; i += 1) {\r\n\t\t\ttemp.push([ \r\n\t\t\t\tleadsArray[i][\"full_name\"],\r\n\t\t\t\tleadsArray[i][\"latest_title\"] + \"at \" + leadsArray[i][\"latest_title_company\"],\r\n\t\t\t\tleadsArray[i][\"geo_region\"],\r\n\t\t\t\tleadsArray[i][\"member_urn_id\"]\r\n\t\t\t])\r\n\t\t}\r\n\t\tsetLeadsArray(temp);\r\n\t}, [leadsArray]);\t\r\n\t\t\r\n\t// const handleGettingPeopleInterests = async (sessionId, profileUrn) => {\r\n\t// \tsetIsLoading(true);\r\n\t// \ttry {\r\n\t// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\r\n\t// \t\t\tmethod: \"POST\",\r\n\t// \t\t\theaders: {\r\n\t// \t\t\t\t\"Content-Type\": \"application/json\"\r\n\t// \t\t\t},\r\n\t// \t\t\tbody: JSON.stringify({\r\n\t// \t\t\t\tsessionId: sessionId,\r\n\t// \t\t\t\tprofileUrn: profileUrn\r\n\t// \t\t\t})\r\n\t// \t\t});\r\n\t\t\t\r\n\t// \t\tconst data = await response.json();\t\t\t\r\n\t// \t\tconst jobId = data.message;\r\n\t\t\t\r\n\t// \t\tCheckJobStatus(jobId, (peopleInterestsArray) => {\r\n\t// \t\t\tsetIsLoading(false);\r\n\t// \t\t\tsetPeopleInterestsArray(peopleInterestsArray);\t\r\n\t// \t\t});\r\n\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.error(error);\r\n\t// \t}\r\n\t// };\r\n\t\r\n\t// const handleGettingCompanyInterests = async (sessionId, profileUrn, publicId) => {\r\n\t// \tsetIsLoading(true);\r\n\t// \ttry {\r\n\t// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\r\n\t// \t\t\tmethod: \"POST\",\r\n\t// \t\t\theaders: {\r\n\t// \t\t\t\t\"Content-Type\": \"application/json\"\r\n\t// \t\t\t},\r\n\t// \t\t\tbody: JSON.stringify({\r\n\t// \t\t\t\tsessionId: sessionId,\r\n\t// \t\t\t\tprofileUrn: profileUrn,\r\n\t// \t\t\t\tpublicId: publicId\r\n\t// \t\t\t})\r\n\t// \t\t});\r\n\t\t\t\r\n\t// \t\tconst data = await response.json();\r\n\t// \t\tconst jobId = data.message;\r\n\t\t\t\r\n\t// \t\tCheckJobStatus(jobId, (companyInterestsArray) => {\r\n\t// \t\t\tsetIsLoading(false);\r\n\t// \t\t\tsetCompanyInterestsArray(companyInterestsArray);\t\r\n\t// \t\t});\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.error(error);\r\n\t// \t}\r\n\t// };\r\n\t\r\n\t// // const handleGettingActivityInterests = () => {\r\n\t// \t// // TODO\r\n\t// // };\r\n\t\r\n\t// const handleInterestsSelection = (event) => {\r\n\t// \tvar selections = event.target.options;\r\n\t// \tconst updatedInterestsArray = [];\r\n\t// \tfor (var i = 0; i < selections.length; i++){\r\n\t// \t\tif(selections[i].selected){\r\n\t// \t\t\tupdatedInterestsArray.push(selections[i].value);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// \tsetSelectedInterests(updatedInterestsArray);\r\n\t// }\r\n\t\r\n\t// const handleMakingConnectNote = async (fullName) => {\r\n\t// \tconst prompt = \"This is the profile of a person: \" + \"\\n\" + fullName \r\n\t// \t+ \" This is their summary: \" +\r\n\t// \t\" These are their interests: \" + selectedInterests \r\n\t// \t+ \" Use the internet to get something useful about the interests and use it in the request. \"\r\n\t// \t+ \" Write a request to connect with them. Make it casual but eyecatching. The goal is to ask about their current Salesforce implementation. The length should be no more than 300 characters.\";\r\n\t// \tsetIsLoading(true);\r\n\t// \ttry {\r\n\t// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\r\n\t// \t\t\tmethod: \"POST\",\r\n\t// \t\t\theaders: {\r\n\t// \t\t\t\t\"Content-Type\": \"application/json\"\r\n\t// \t\t\t},\r\n\t// \t\t\tbody: JSON.stringify({\r\n\t// \t\t\t\tprompt: prompt\r\n\t// \t\t\t})\r\n\t// \t\t});\r\n\t// \t\tconst data = await response.json();\r\n\t// \t\tconst jobId = data.message;\r\n\t// \t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t// \t\t\tsetIsLoading(false);\r\n\t// \t\t\tsetNoteTextArea(resultArray);\t\r\n\t// \t\t});\r\n\t// \t}catch(error){\r\n\t// \t\tconsole.log(error);\r\n\t// \t}\r\n\t// };\r\n\t\r\n\t// const handleSendingConnectNote = async (sessionId, profileId) => {\r\n\t// \ttry {\r\n\t// \t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-connect\", {\r\n\t// \t\t\tmethod: \"POST\",\r\n\t// \t\t\theaders: {\r\n\t// \t\t\t\t\"Content-Type\": \"application/json\"\r\n\t// \t\t\t},\r\n\t// \t\t\tbody: JSON.stringify({\r\n\t// \t\t\t\tsessionId: sessionId,\r\n\t// \t\t\t\tprofileId: profileId,\r\n\t// \t\t\t\ttext: noteTextArea\r\n\t// \t\t\t})\r\n\t// \t\t});\r\n\t// \t\tconst data = await response.json();\r\n\t// \t\tconsole.log(\"Successfully sent the connect note to the person\", data.message);\r\n\t// \t}catch(error){\r\n\t// \t\tconsole.log(error);\r\n\t// \t}\r\n\t// };\r\n\t\r\n\t// const handleNoteTextAreaChange = (event) => {\r\n\t// \tsetNoteTextArea(event.target.value);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<>\r\n            <Button variant=\"primary\" type=\"button\" onClick={handleGettingLeads}>\r\n                Get Leads\r\n            </Button>\r\n\r\n\t\t\t{/* profile_info['full_name'] = person['fullName']\r\n\t\t\tprofile_info['latest_title'] = person['currentPositions'][0]['title']        \r\n\t\t\tprofile_info['latest_title_company'] = person['currentPositions'][0]['companyName']\r\n\t\t\tprofile_info['geo_region'] = person['geoRegion']\r\n\t\t\tprofile_info['member_urn_id'] = person['entityUrn'] */}\r\n\r\n\t\t\t<Container>\r\n\t\t\t\t<h1>Search Results:</h1>\r\n\t\t\t\t<ListGroup>\r\n\t\t\t\t\t{leadsArray.map((leadInfo) => (\r\n\t\t\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\t\t\taction\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\t\t\t\t\tsetSelectedName(leadInfo[0]);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{leadInfo[0]}, {leadInfo[1]}\r\n\t\t\t\t\t\t\t{/* {showProfileArea && selectedName === leadInfo[0] && (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={noteTextArea}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleNoteTextAreaChange}\r\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"The generated note will appear here\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t\t\t<ButtonGroup aria-label=\"Basic example\" className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={handleGettingPeopleInterests(sessionId, leadInfo[4])}>\r\n\t\t\t\t\t\t\t\t\t\t\tGet people interests\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={handleGettingCompanyInterests(sessionId, leadInfo[4], leadInfo[3])}>\r\n\t\t\t\t\t\t\t\t\t\t\tGet company interests\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={handleMakingConnectNote(leadInfo[0])}>\r\n\t\t\t\t\t\t\t\t\t\t\tMake Connect Note\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={handleSendingConnectNote(sessionId, leadInfo[2])}>\r\n\t\t\t\t\t\t\t\t\t\t\tSend Connect Note\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</ButtonGroup>\r\n\r\n\t\t\t\t\t\t\t\t\t{peopleInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{peopleInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t{companyInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{companyInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t{activityInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{activityInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t)} */}\r\n\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ListGroup>\r\n\t\t\t</Container>\r\n\t\t</>\r\n\t)\r\n}\r\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}