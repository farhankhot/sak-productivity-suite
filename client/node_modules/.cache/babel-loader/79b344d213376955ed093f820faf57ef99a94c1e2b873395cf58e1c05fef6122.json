{"ast":null,"code":"import _slicedToArray from\"C:/Users/farha/OneDrive/Desktop/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/*global chrome*/import React,{useState,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AudioRetrieval(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),transcriptTextArea=_useState2[0],setTranscriptTextArea=_useState2[1];var handleStartCapture=function handleStartCapture(){// Get the current tab's audio stream\nchrome.tabCapture.capture({audio:true},function(stream){// Create an AudioContext\nvar audioContext=new AudioContext();console.log(audioContext);// Create a MediaElementAudioSourceNode from the stream\nvar sourceNode=audioContext.createMediaStreamSource(stream);console.log(sourceNode);// Connect the sourceNode to a ScriptProcessorNode\nvar scriptNode=audioContext.createScriptProcessor(2048,1,1);sourceNode.connect(scriptNode);scriptNode.connect(audioContext.destination);// Process the audio data in the scriptNode's onaudioprocess callback\nscriptNode.onaudioprocess=function(audioProcessingEvent){// Get the input buffer and output buffer\nvar inputBuffer=audioProcessingEvent.inputBuffer;var outputBuffer=audioProcessingEvent.outputBuffer;// Process the audio data in the inputBuffer\n// ...\n// Copy the processed audio data to the outputBuffer\nfor(var channel=0;channel<outputBuffer.numberOfChannels;channel++){var inputData=inputBuffer.getChannelData(channel);var transcriptText=\"\";var outputData=outputBuffer.getChannelData(channel);for(var i=0;i<inputBuffer.length;i++){outputData[i]=inputData[i];transcriptText+=outputData[i].toString()+\" \";}setTranscriptTextArea(transcriptText);}};});};var handleTranscriptTextAreaChange=function handleTranscriptTextAreaChange(event){setTranscriptTextArea(event.target.value);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleStartCapture,children:\"Start audio capture\"}),/*#__PURE__*/_jsx(\"textarea\",{value:transcriptTextArea,onChange:handleTranscriptTextAreaChange,placeholder:\"The transcript will appear here\"})]});}export default AudioRetrieval;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","AudioRetrieval","_useState","_useState2","_slicedToArray","transcriptTextArea","setTranscriptTextArea","handleStartCapture","chrome","tabCapture","capture","audio","stream","audioContext","AudioContext","console","log","sourceNode","createMediaStreamSource","scriptNode","createScriptProcessor","connect","destination","onaudioprocess","audioProcessingEvent","inputBuffer","outputBuffer","channel","numberOfChannels","inputData","getChannelData","transcriptText","outputData","i","length","toString","handleTranscriptTextAreaChange","event","target","value","children","onClick","onChange","placeholder"],"sources":["C:/Users/farha/OneDrive/Desktop/sak-productivity-suite/client/src/AudioRetrieval.js"],"sourcesContent":["/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\n\r\nfunction AudioRetrieval() {\r\n\t\r\n\tconst [transcriptTextArea, setTranscriptTextArea] = useState([]);\r\n\t\t\t\t\r\n\tconst handleStartCapture = () => {\r\n\t\t// Get the current tab's audio stream\r\n\t\tchrome.tabCapture.capture({audio: true}, function(stream) {\r\n\t\t\t\r\n\t\t\t// Create an AudioContext\r\n\t\t\tconst audioContext = new AudioContext();\r\n\t\t\t\r\n\t\t\tconsole.log(audioContext);\r\n\r\n\t\t\t// Create a MediaElementAudioSourceNode from the stream\r\n\t\t\tconst sourceNode = audioContext.createMediaStreamSource(stream);\r\n\t\t\tconsole.log(sourceNode);\r\n\r\n\t\t\t// Connect the sourceNode to a ScriptProcessorNode\r\n\t\t\tconst scriptNode = audioContext.createScriptProcessor(2048, 1, 1);\r\n\t\t\tsourceNode.connect(scriptNode);\r\n\t\t\tscriptNode.connect(audioContext.destination);\r\n\r\n\t\t\t// Process the audio data in the scriptNode's onaudioprocess callback\r\n\t\t\tscriptNode.onaudioprocess = function(audioProcessingEvent) {\r\n\t\t\t\t\r\n\t\t\t\t// Get the input buffer and output buffer\r\n\t\t\t\tconst inputBuffer = audioProcessingEvent.inputBuffer;\r\n\t\t\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\r\n\t\t\t\t// Process the audio data in the inputBuffer\r\n\t\t\t\t// ...\r\n\r\n\t\t\t\t// Copy the processed audio data to the outputBuffer\r\n\t\t\t\tfor (let channel = 0; channel < outputBuffer.numberOfChannels; channel++) {\r\n\t\t\t\t\tconst inputData = inputBuffer.getChannelData(channel);\r\n\t\t\t\t\tlet transcriptText = \"\";\r\n\t\t\t\t\tconst outputData = outputBuffer.getChannelData(channel);\r\n\t\t\t\t\tfor (let i = 0; i < inputBuffer.length; i++) {\r\n\t\t\t\t\t\toutputData[i] = inputData[i];\r\n\t\t\t\t\t\ttranscriptText += outputData[i].toString() + \" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetTranscriptTextArea(transcriptText);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t\t\r\n\t};\r\n\t\r\n\tconst handleTranscriptTextAreaChange = (event) => {\r\n\t\tsetTranscriptTextArea(event.target.value);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t<button onClick={handleStartCapture}>\r\n\t\t\tStart audio capture\r\n\t\t</button>\r\n\t\t<textarea value={transcriptTextArea} onChange={handleTranscriptTextAreaChange} placeholder=\"The transcript will appear here\"></textarea>\r\n\t\t</>\r\n\t\t\r\n\t);\r\n\r\n}\r\nexport default AudioRetrieval;"],"mappings":"mJAAA,iBACA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,CAAEC,SAAS,KAAO,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEjD,QAAS,CAAAC,cAAcA,CAAA,CAAG,CAEzB,IAAAC,SAAA,CAAoDT,QAAQ,CAAC,EAAE,CAAC,CAAAU,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAzDG,kBAAkB,CAAAF,UAAA,IAAEG,qBAAqB,CAAAH,UAAA,IAEhD,GAAM,CAAAI,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAA,CAAS,CAChC;AACAC,MAAM,CAACC,UAAU,CAACC,OAAO,CAAC,CAACC,KAAK,CAAE,IAAI,CAAC,CAAE,SAASC,MAAM,CAAE,CAEzD;AACA,GAAM,CAAAC,YAAY,CAAG,GAAI,CAAAC,YAAY,EAAE,CAEvCC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC,CAEzB;AACA,GAAM,CAAAI,UAAU,CAAGJ,YAAY,CAACK,uBAAuB,CAACN,MAAM,CAAC,CAC/DG,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC,CAEvB;AACA,GAAM,CAAAE,UAAU,CAAGN,YAAY,CAACO,qBAAqB,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC,CAAC,CACjEH,UAAU,CAACI,OAAO,CAACF,UAAU,CAAC,CAC9BA,UAAU,CAACE,OAAO,CAACR,YAAY,CAACS,WAAW,CAAC,CAE5C;AACAH,UAAU,CAACI,cAAc,CAAG,SAASC,oBAAoB,CAAE,CAE1D;AACA,GAAM,CAAAC,WAAW,CAAGD,oBAAoB,CAACC,WAAW,CACpD,GAAM,CAAAC,YAAY,CAAGF,oBAAoB,CAACE,YAAY,CAEtD;AACA;AAEA;AACA,IAAK,GAAI,CAAAC,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAGD,YAAY,CAACE,gBAAgB,CAAED,OAAO,EAAE,CAAE,CACzE,GAAM,CAAAE,SAAS,CAAGJ,WAAW,CAACK,cAAc,CAACH,OAAO,CAAC,CACrD,GAAI,CAAAI,cAAc,CAAG,EAAE,CACvB,GAAM,CAAAC,UAAU,CAAGN,YAAY,CAACI,cAAc,CAACH,OAAO,CAAC,CACvD,IAAK,GAAI,CAAAM,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGR,WAAW,CAACS,MAAM,CAAED,CAAC,EAAE,CAAE,CAC5CD,UAAU,CAACC,CAAC,CAAC,CAAGJ,SAAS,CAACI,CAAC,CAAC,CAC5BF,cAAc,EAAIC,UAAU,CAACC,CAAC,CAAC,CAACE,QAAQ,EAAE,CAAG,GAAG,CACjD,CACA7B,qBAAqB,CAACyB,cAAc,CAAC,CACtC,CACD,CAAC,CACF,CAAC,CAAC,CAEH,CAAC,CAED,GAAM,CAAAK,8BAA8B,CAAG,QAAjC,CAAAA,8BAA8BA,CAAIC,KAAK,CAAK,CACjD/B,qBAAqB,CAAC+B,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAC1C,CAAC,CAED,mBACCvC,KAAA,CAAAF,SAAA,EAAA0C,QAAA,eACA5C,IAAA,WAAQ6C,OAAO,CAAElC,kBAAmB,CAAAiC,QAAA,CAAC,qBAErC,EAAS,cACT5C,IAAA,aAAU2C,KAAK,CAAElC,kBAAmB,CAACqC,QAAQ,CAAEN,8BAA+B,CAACO,WAAW,CAAC,iCAAiC,EAAY,GACrI,CAIL,CACA,cAAe,CAAA1C,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}