{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/farha/OneDrive/Desktop/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/farha/OneDrive/Desktop/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/farha/OneDrive/Desktop/sak-productivity-suite/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/*global chrome*/import React,{useState,useEffect}from\"react\";import DisplayThread from\"./DisplayThread.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function DisplayConvos(props){var cookie=props.cookie;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),threadArray=_useState2[0],setThreadArray=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),threadName=_useState4[0],setThreadName=_useState4[1];useEffect(function(){var handleGetThreads=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response,data,thread;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('https://sak-productivity-suite.herokuapp.com/get-convo-threads',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({cookie:cookie})});case 2:response=_context.sent;_context.next=5;return response.json();case 5:data=_context.sent;thread=data.message;setThreadArray(thread);case 8:case\"end\":return _context.stop();}},_callee);}));return function handleGetThreads(){return _ref.apply(this,arguments);};}();handleGetThreads();},[]);var handleThreadClick=function handleThreadClick(threadName){setThreadName(threadName);};return/*#__PURE__*/_jsx(_Fragment,{children:setThreadName!==\"\"?/*#__PURE__*/_jsx(DisplayThread,{cookie:cookie,threadName:threadName}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Messages\"}),threadArray.length>0&&/*#__PURE__*/_jsx(_Fragment,{children:threadArray.map(function(threadName){return/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleThreadClick(threadName);},children:threadName[0]});})})]})});}export default DisplayConvos;// const handleGetMessages = async (profileUrn) => {\n// const response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\n// method: 'POST',\n// headers: {\n// 'Content-Type': 'application/json',\n// },\n// body: JSON.stringify({\n// cookie: cookie,\n// profileUrn: profileUrn\n// })\n// });\n// const data = await response.json();\n// const message = data.message;\n// setMessageArray(message);\n// };\n// document.getElementById(\"MessagesButton\").onclick = function() {\n// fetch(\"https://ai-assistant.herokuapp.com/get-convo-threads\", {\n// method: \"POST\",\n// headers: {\n// \"Content-Type\": \"application/json\"\n// },\n// body: JSON.stringify({\n// email: email,\n// password: password,\n// cookie: cookie\n// })\n// })\n// .then(response => response.json())\n// .then(data => {\n// console.log(\"Successfully gotten conversation threads\", data.message);\n// var words = data.message;\n// var container = document.getElementById('ThreadsContainer');\n// for (var i = 0; i < words.length; i++) {\n// var button = document.createElement('input');\n// button.type = 'button';\n// button.value = words[i][0];\n// button.id = words[i][1];\n// button.className = \"OpenConvoButton\";\n// var label = document.createElement('label');\n// label.textContent = words[i][0];\n// label.appendChild(button);\n// container.appendChild(label);\n// }\n// const convoButtons = document.querySelectorAll('.OpenConvoButton');\n// convoButtons.forEach(function(button) {\n// button.addEventListener('click', function() {\n// // Clear the buttons, create a header of button.value\n// container.style.display = \"none\";\n// var msg_container = document.getElementById(\"MessagesContainer\");\n// var new_h1 = document.createElement(\"h1\")\n// new_h1.innerHTML = button.value;\n// msg_container.appendChild(new_h1);\n// // Display the messages, create a textarea with \"Get Interests\" and \"Generate Message\" button\n// fetch(\"https://ai-assistant.herokuapp.com/get-convo-messages\", {\n// method: \"POST\",\n// headers: {\n// \"Content-Type\": \"application/json\"\n// },\n// body: JSON.stringify({\n// email: email,\n// password: password,\n// cookie: cookie,\n// profileUrn: button.id\n// })\n// })\n// .then(response => response.json())\n// .then(data => {\n// console.log(\"Successfully gotten messages\", data.message);\n// var new_p = document.createElement(\"p\");\n// new_p.textContent = data.message;\n// new_p.style.color = \"white\";\n// var new_textarea = document.createElement(\"textarea\");\n// new_textarea.id = \"messageTextbox\";\n// var generate_interests_button = document.createElement(\"button\");\n// generate_interests_button.textContent = \"Get Interests\";\n// var generate_message_button = document.createElement(\"button\");\n// generate_message_button.textContent = \"Generate Message\";\n// var send_message_button = document.createElement(\"button\");\n// send_message_button.textContent = \"Send Message\";\n// msg_container.appendChild(new_p);\n// msg_container.appendChild(new_textarea);\n// msg_container.appendChild(generate_interests_button);\n// msg_container.appendChild(generate_message_button);\n// msg_container.appendChild(send_message_button);\t\n// generate_interests_button.onclick = function() {\n// fetch(\"https://ai-assistant.herokuapp.com/get-interests-from-thread\", {\n// method: \"POST\",\n// headers: {\n// \"Content-Type\": \"application/json\"\n// },\n// body: JSON.stringify({\n// email: email,\n// password: password,\n// cookie: cookie,\n// publicId: button.id\n// })\n// })\n// .then(response => response.json())\n// .then(data => {\n// console.log(\"Successfully gotten interests\", data.message);\n// var words = data.message;\n// var container = document.getElementById('InterestsContainer');\n// for (var i = 0; i < words.length; i++) {\n// var checkbox = document.createElement('input');\n// checkbox.type = 'checkbox';\n// checkbox.value = words[i];\n// var label = document.createElement('label');\n// label.textContent = words[i];\n// label.appendChild(checkbox);\n// container.appendChild(label);\n// }\n// });\n// }\n// // If generate_message_button is clicked\n// generate_message_button.onclick = function() {\n// var checkboxes = document.querySelectorAll('input[type=checkbox]');\n// var topicList = [];\n// for (var i = 0; i < checkboxes.length; i++) {\n// if (checkboxes[i].checked) {\n// var topic = checkboxes[i].value;\n// topicList.push(topic);\n// }\n// }\n// var topicListString = topicList.toString();\n// var prompt_string = \"Reply to this: \" + data.message;\n// fetch('https://api.openai.com/v1/completions', {\n// method: 'POST',\n// headers: {\n// 'Content-Type': 'application/json',\n// 'Authorization': 'Bearer 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'\n// },\n// body: JSON.stringify({\n// model: 'text-davinci-003',\n// prompt: prompt_string,\n// max_tokens: 55,\n// temperature: 0.7\n// })\n// })\n// .then(response => response.json())\n// .then(data => {\n// //console.log(JSON.stringify(data));\n// console.log(data.choices[0].text);\n// new_textarea.value = data.choices[0].text;\n// }).catch(error => console.error(error));\n// // document.getElementById(\"my-textarea\").value = prompt_string;\n// }\n// send_message_button.onclick = function() {\n// fetch(\"https://ai-assistant.herokuapp.com/send-message\", {\n// method: \"POST\",\n// headers: {\n// \"Content-Type\": \"application/json\"\n// },\n// body: JSON.stringify({\n// email: email,\n// password: password,\n// cookie: cookie,\n// profileId: button.id,\n// text: new_textarea.value\n// })\n// })\n// .then(response => response.json())\n// .then(data => {\n// console.log(\"Successfully sent connect to server\", data.message);\n// });\n// }\n// }","map":{"version":3,"names":["React","useState","useEffect","DisplayThread","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","DisplayConvos","props","cookie","_useState","_useState2","_slicedToArray","threadArray","setThreadArray","_useState3","_useState4","threadName","setThreadName","handleGetThreads","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","thread","wrap","_callee$","_context","prev","next","fetch","method","headers","body","JSON","stringify","sent","json","message","stop","apply","arguments","handleThreadClick","children","length","map","onClick"],"sources":["C:/Users/farha/OneDrive/Desktop/sak-productivity-suite/client/src/DisplayConvos.js"],"sourcesContent":["/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport DisplayThread from \"./DisplayThread.js\";\r\n\r\nfunction DisplayConvos(props) {\r\n\t\r\n\tconst {cookie} = props;\r\n\t\r\n\tconst [threadArray, setThreadArray] = useState([]);\r\n\tconst [threadName, setThreadName] = useState(\"\");\r\n\r\n\tuseEffect( () => {\r\n\t\tconst handleGetThreads = async () => {\r\n\t\t\tconst response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-threads', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst thread = data.message;\r\n\t\t\tsetThreadArray(thread);\r\n\t\t};\t\r\n\t\thandleGetThreads();\r\n\t}, []);\r\n\t\t\r\n\t\t\r\n\tconst handleThreadClick = (threadName) => {\r\n\t\tsetThreadName(threadName);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t{setThreadName !== \"\" ? (\r\n\t\t\t<DisplayThread cookie={cookie} threadName={threadName} />\r\n\t\t) : (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Messages</h1>\r\n\t\t\t\r\n\t\t\t\t{threadArray.length > 0 && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t{threadArray.map( (threadName) => (\r\n\t\t\t\t\t\t<button onClick={() => handleThreadClick(threadName)}>{threadName[0]}</button>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)}\r\n\t\t</>\r\n\t)\r\n\r\n}\r\nexport default DisplayConvos;\r\n\r\n\t// const handleGetMessages = async (profileUrn) => {\r\n\t\t// const response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\r\n\t\t\t// method: 'POST',\r\n\t\t\t// headers: {\r\n\t\t\t\t// 'Content-Type': 'application/json',\r\n\t\t\t// },\r\n\t\t\t// body: JSON.stringify({\r\n\t\t\t\t// cookie: cookie,\r\n\t\t\t\t// profileUrn: profileUrn\r\n\t\t\t// })\r\n\t\t// });\r\n\r\n\t\t// const data = await response.json();\r\n\t\t// const message = data.message;\r\n\t\t// setMessageArray(message);\r\n\r\n\t// };\r\n\r\n\r\n// document.getElementById(\"MessagesButton\").onclick = function() {\r\n\r\n// fetch(\"https://ai-assistant.herokuapp.com/get-convo-threads\", {\r\n\t// method: \"POST\",\r\n\t// headers: {\r\n\t\t// \"Content-Type\": \"application/json\"\r\n\t// },\r\n\t// body: JSON.stringify({\r\n\t\t// email: email,\r\n\t\t// password: password,\r\n\t\t// cookie: cookie\r\n\t// })\r\n// })\r\n// .then(response => response.json())\r\n// .then(data => {\r\n\r\n\t// console.log(\"Successfully gotten conversation threads\", data.message);\r\n\t// var words = data.message;\r\n\t// var container = document.getElementById('ThreadsContainer');\r\n\r\n\t// for (var i = 0; i < words.length; i++) {\r\n\r\n\t\t// var button = document.createElement('input');\r\n\t\t// button.type = 'button';\r\n\t\t// button.value = words[i][0];\r\n\t\t// button.id = words[i][1];\r\n\t\t// button.className = \"OpenConvoButton\";\r\n\t\t// var label = document.createElement('label');\r\n\t\t// label.textContent = words[i][0];\r\n\t\t// label.appendChild(button);\r\n\t\t// container.appendChild(label);\r\n\t// }\r\n\t// const convoButtons = document.querySelectorAll('.OpenConvoButton');\r\n\t// convoButtons.forEach(function(button) {\r\n\t\t// button.addEventListener('click', function() {\r\n\r\n\t\t\t// // Clear the buttons, create a header of button.value\r\n\t\t\t// container.style.display = \"none\";\r\n\t\t\t// var msg_container = document.getElementById(\"MessagesContainer\");\r\n\t\t\t// var new_h1 = document.createElement(\"h1\")\r\n\t\t\t// new_h1.innerHTML = button.value;\r\n\r\n\t\t\t// msg_container.appendChild(new_h1);\r\n\r\n\t\t\t// // Display the messages, create a textarea with \"Get Interests\" and \"Generate Message\" button\r\n\t\t\t// fetch(\"https://ai-assistant.herokuapp.com/get-convo-messages\", {\r\n\r\n\t\t\t\t\t// method: \"POST\",\r\n\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t// \"Content-Type\": \"application/json\"\r\n\t\t\t\t\t// },\r\n\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t// email: email,\r\n\t\t\t\t\t\t// password: password,\r\n\t\t\t\t\t\t// cookie: cookie,\r\n\t\t\t\t\t\t// profileUrn: button.id\r\n\t\t\t\t\t// })\r\n\t\t\t\t// })\r\n\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// console.log(\"Successfully gotten messages\", data.message);\r\n\r\n\t\t\t\t\t// var new_p = document.createElement(\"p\");\r\n\t\t\t\t\t// new_p.textContent = data.message;\r\n\t\t\t\t\t// new_p.style.color = \"white\";\r\n\r\n\t\t\t\t\t// var new_textarea = document.createElement(\"textarea\");\r\n\t\t\t\t\t// new_textarea.id = \"messageTextbox\";\r\n\t\t\t\t\t// var generate_interests_button = document.createElement(\"button\");\r\n\t\t\t\t\t// generate_interests_button.textContent = \"Get Interests\";\r\n\t\t\t\t\t// var generate_message_button = document.createElement(\"button\");\r\n\t\t\t\t\t// generate_message_button.textContent = \"Generate Message\";\r\n\r\n\t\t\t\t\t// var send_message_button = document.createElement(\"button\");\r\n\t\t\t\t\t// send_message_button.textContent = \"Send Message\";\r\n\r\n\t\t\t\t\t// msg_container.appendChild(new_p);\r\n\t\t\t\t\t// msg_container.appendChild(new_textarea);\r\n\t\t\t\t\t// msg_container.appendChild(generate_interests_button);\r\n\t\t\t\t\t// msg_container.appendChild(generate_message_button);\r\n\t\t\t\t\t// msg_container.appendChild(send_message_button);\t\r\n\r\n\t\t\t\t\t// generate_interests_button.onclick = function() {\r\n\r\n\t\t\t\t\t\t// fetch(\"https://ai-assistant.herokuapp.com/get-interests-from-thread\", {\r\n\t\t\t\t\t\t\t\t// method: \"POST\",\r\n\t\t\t\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t\t\t\t// \"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t\t// },\r\n\t\t\t\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t// email: email,\r\n\t\t\t\t\t\t\t\t\t// password: password,\r\n\t\t\t\t\t\t\t\t\t// cookie: cookie,\r\n\t\t\t\t\t\t\t\t\t// publicId: button.id\r\n\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\t\t\t// console.log(\"Successfully gotten interests\", data.message);\r\n\r\n\t\t\t\t\t\t\t\t// var words = data.message;\r\n\t\t\t\t\t\t\t\t// var container = document.getElementById('InterestsContainer');\r\n\r\n\t\t\t\t\t\t\t\t// for (var i = 0; i < words.length; i++) {\r\n\r\n\t\t\t\t\t\t\t\t\t// var checkbox = document.createElement('input');\r\n\t\t\t\t\t\t\t\t\t// checkbox.type = 'checkbox';\r\n\t\t\t\t\t\t\t\t\t// checkbox.value = words[i];\r\n\t\t\t\t\t\t\t\t\t// var label = document.createElement('label');\r\n\t\t\t\t\t\t\t\t\t// label.textContent = words[i];\r\n\t\t\t\t\t\t\t\t\t// label.appendChild(checkbox);\r\n\t\t\t\t\t\t\t\t\t// container.appendChild(label);\r\n\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t// });\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// // If generate_message_button is clicked\r\n\t\t\t\t\t// generate_message_button.onclick = function() {\r\n\r\n\t\t\t\t\t\t// var checkboxes = document.querySelectorAll('input[type=checkbox]');\r\n\t\t\t\t\t\t// var topicList = [];\r\n\t\t\t\t\t\t// for (var i = 0; i < checkboxes.length; i++) {\r\n\t\t\t\t\t\t\t// if (checkboxes[i].checked) {\r\n\t\t\t\t\t\t\t\t// var topic = checkboxes[i].value;\r\n\t\t\t\t\t\t\t\t// topicList.push(topic);\r\n\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// var topicListString = topicList.toString();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// var prompt_string = \"Reply to this: \" + data.message;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// fetch('https://api.openai.com/v1/completions', {\r\n\t\t\t\t\t\t\t\t// method: 'POST',\r\n\t\t\t\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t\t\t\t// 'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\t\t\t// 'Authorization': 'Bearer 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'\r\n\t\t\t\t\t\t\t\t// },\r\n\r\n\t\t\t\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t// model: 'text-davinci-003',\r\n\t\t\t\t\t\t\t\t\t// prompt: prompt_string,\r\n\t\t\t\t\t\t\t\t\t// max_tokens: 55,\r\n\t\t\t\t\t\t\t\t\t// temperature: 0.7\r\n\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\t\t// //console.log(JSON.stringify(data));\r\n\t\t\t\t\t\t\t// console.log(data.choices[0].text);\r\n\t\t\t\t\t\t\t// new_textarea.value = data.choices[0].text;\r\n\r\n\t\t\t\t\t\t// }).catch(error => console.error(error));\r\n\r\n\t\t\t\t\t\t// // document.getElementById(\"my-textarea\").value = prompt_string;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// send_message_button.onclick = function() {\r\n\r\n\t\t\t\t\t\t// fetch(\"https://ai-assistant.herokuapp.com/send-message\", {\r\n\t\t\t\t\t\t\t\t// method: \"POST\",\r\n\t\t\t\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t\t\t\t// \"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t\t// },\r\n\t\t\t\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t// email: email,\r\n\t\t\t\t\t\t\t\t\t// password: password,\r\n\t\t\t\t\t\t\t\t\t// cookie: cookie,\r\n\t\t\t\t\t\t\t\t\t// profileId: button.id,\r\n\t\t\t\t\t\t\t\t\t// text: new_textarea.value\r\n\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\t\t\t// console.log(\"Successfully sent connect to server\", data.message);\r\n\t\t\t\t\t\t\t// });\r\n\t\t\t\t\t// }\r\n\t\t\t\t// }"],"mappings":"ycAAA,iBACA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,CAAEC,SAAS,KAAO,OAAO,CAChD,MAAO,CAAAC,aAAa,KAAM,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE/C,QAAS,CAAAC,aAAaA,CAACC,KAAK,CAAE,CAE7B,GAAO,CAAAC,MAAM,CAAID,KAAK,CAAfC,MAAM,CAEb,IAAAC,SAAA,CAAsCZ,QAAQ,CAAC,EAAE,CAAC,CAAAa,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA3CG,WAAW,CAAAF,UAAA,IAAEG,cAAc,CAAAH,UAAA,IAClC,IAAAI,UAAA,CAAoCjB,QAAQ,CAAC,EAAE,CAAC,CAAAkB,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAzCE,UAAU,CAAAD,UAAA,IAAEE,aAAa,CAAAF,UAAA,IAEhCjB,SAAS,CAAE,UAAM,CAChB,GAAM,CAAAoB,gBAAgB,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA,MAAAC,QAAA,CAAAC,IAAA,CAAAC,MAAA,QAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SACD,CAAAC,KAAK,CAAC,gEAAgE,CAAE,CAC9FC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACR,cAAc,CAAE,kBACjB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACpB7B,MAAM,CAAEA,MACT,CAAC,CACF,CAAC,CAAC,QARIgB,QAAQ,CAAAK,QAAA,CAAAS,IAAA,CAAAT,QAAA,CAAAE,IAAA,SAUK,CAAAP,QAAQ,CAACe,IAAI,EAAE,QAA5Bd,IAAI,CAAAI,QAAA,CAAAS,IAAA,CACJZ,MAAM,CAAGD,IAAI,CAACe,OAAO,CAC3B3B,cAAc,CAACa,MAAM,CAAC,CAAC,wBAAAG,QAAA,CAAAY,IAAA,MAAAlB,OAAA,GACvB,kBAdK,CAAAL,gBAAgBA,CAAA,SAAAC,IAAA,CAAAuB,KAAA,MAAAC,SAAA,OAcrB,CACDzB,gBAAgB,EAAE,CACnB,CAAC,CAAE,EAAE,CAAC,CAGN,GAAM,CAAA0B,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAI5B,UAAU,CAAK,CACzCC,aAAa,CAACD,UAAU,CAAC,CAC1B,CAAC,CAED,mBACCf,IAAA,CAAAE,SAAA,EAAA0C,QAAA,CACC5B,aAAa,GAAK,EAAE,cACpBhB,IAAA,CAACF,aAAa,EAACS,MAAM,CAAEA,MAAO,CAACQ,UAAU,CAAEA,UAAW,EAAG,cAEzDX,KAAA,QAAAwC,QAAA,eACC5C,IAAA,OAAA4C,QAAA,CAAI,UAAQ,EAAK,CAEhBjC,WAAW,CAACkC,MAAM,CAAG,CAAC,eACtB7C,IAAA,CAAAE,SAAA,EAAA0C,QAAA,CACCjC,WAAW,CAACmC,GAAG,CAAE,SAAC/B,UAAU,qBAC5Bf,IAAA,WAAQ+C,OAAO,CAAE,SAAAA,QAAA,QAAM,CAAAJ,iBAAiB,CAAC5B,UAAU,CAAC,EAAC,CAAA6B,QAAA,CAAE7B,UAAU,CAAC,CAAC,CAAC,EAAU,EAC9E,CAAC,EAEF,GAEF,EACE,CAGL,CACA,cAAe,CAAAV,aAAa,CAE3B;AACC;AACC;AACA;AACC;AACD;AACA;AACC;AACA;AACD;AACD;AAEA;AACA;AACA;AAED;AAGD;AAEA;AACC;AACA;AACC;AACD;AACA;AACC;AACA;AACA;AACD;AACD;AACA;AACA;AAEC;AACA;AACA;AAEA;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACA;AACA;AACC;AAEC;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEE;AACA;AACC;AACD;AACA;AACC;AACA;AACA;AACA;AACD;AACD;AACA;AACA;AAEC;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEC;AACE;AACA;AACC;AACD;AACA;AACC;AACA;AACA;AACA;AACD;AACD;AACA;AACA;AACC;AAEA;AACA;AAEA;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACD;AACF;AAEA;AACA;AAEC;AACA;AACA;AACC;AACC;AACA;AACD;AACD;AACA;AAEA;AAEA;AACE;AACA;AACC;AACA;AACD;AAEA;AACC;AACA;AACA;AACA;AACD;AACF;AACA;AACA;AACC;AACA;AACA;AAED;AAEA;AACD;AAEA;AAEC;AACE;AACA;AACC;AACD;AACA;AACC;AACA;AACA;AACA;AACA;AACD;AACD;AACA;AACA;AACC;AACD;AACF;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}