[{"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\index.js":"1","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\reportWebVitals.js":"2","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedInCookie.js":"3","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\ProfileSearch.js":"4","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\CheckJobStatus.js":"5","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js":"6","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedinCookie.js":"7","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\AudioRetrieval.js":"8","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayConvos.js":"9","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayThread.js":"10"},{"size":541,"mtime":1678902728806,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1678485642725,"results":"13","hashOfConfig":"12"},{"size":31406,"mtime":1678582987951,"results":"14","hashOfConfig":"12"},{"size":2855,"mtime":1679024185940,"results":"15","hashOfConfig":"12"},{"size":652,"mtime":1678579669417,"results":"16","hashOfConfig":"12"},{"size":7664,"mtime":1679035207038,"results":"17","hashOfConfig":"12"},{"size":1231,"mtime":1678996558870,"results":"18","hashOfConfig":"12"},{"size":2354,"mtime":1678842623967,"results":"19","hashOfConfig":"12"},{"size":7995,"mtime":1678994816577,"results":"20","hashOfConfig":"12"},{"size":2314,"mtime":1678996150429,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16u4jrs",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\index.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedInCookie.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\ProfileSearch.js",["57","58"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport DisplaySearchResults from \"./DisplaySearchResults.js\";\r\nimport DisplayConvos from \"./DisplayConvos.js\";\r\nimport loadingGif from \"./loading.gif\";\r\n\r\n// TODO: Fix relative imports (loadingGif should be in /public/)\r\n\r\nfunction ProfileSearch(props) {\r\n\t\r\n\tconst {cookie} = props;\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\tconst [currentCompany, setCurrentCompany] = useState(\"\");\r\n\tconst [mutualConnectionsBoolean, setMutualConnectionsBoolean] = useState(false);\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\tconst [navigateToMessages, setNavigateToMessages] = useState(false);\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\t\t\r\n\tconst handleSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/receive-link\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tlocation: location,\r\n\t\t\t\t\tcurrentCompany: currentCompany,\r\n\t\t\t\t\tmutualConnections: mutualConnectionsBoolean\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetResultArray(resultArray);\t\r\n\t\t\t\tsetJobFinished(true);\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleMessagesButton = () => {\r\n\t\tsetNavigateToMessages(true);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t{jobFinished === true ? (\r\n\t\t\t<DisplaySearchResults cookie={cookie} resultArray={resultArray} />\r\n\t\t) : (\r\n\t\t\t<>\r\n\t\t\t{!isLoading && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button onClick={handleMessagesButton}>\r\n\t\t\t\t\t\tMessages\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t{navigateToMessages && <DisplayConvos cookie={cookie} />}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{!navigateToMessages && !isLoading && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Enter a title\" value={title} onChange={(e) => setTitle(e.target.value)}  />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Location\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Current Company\" value={currentCompany} onChange={(e) => setCurrentCompany(e.target.value)} />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<input type=\"checkbox\" value={mutualConnectionsBoolean} onChange={(e) => setMutualConnectionsBoolean(e.target.value)} />\r\n\t\t\t\t\t<label for=\"mutualConnectionsBoolean\">\r\n\t\t\t\t\t\tGet Mutual Connections?\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<button onClick={handleSearchRequest}>\r\n\t\t\t\t\t\tSearch\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t{isLoading && <img src={loadingGif} alt=\"loading\" />}\r\n\t\t\t</>\r\n\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n\t\r\n}\r\nexport default ProfileSearch;","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\CheckJobStatus.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js",["59","60","61","62","63","64"],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedinCookie.js",["65"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedinCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t{cookie === \"\" ? (\r\n\t\t\t<div>\r\n\t\t\t\t\r\n\t\t\t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1> \r\n\r\n\t\t\t\t<button onClick={handleLinkedinCookie}>\r\n\t\t\t\t\tGet Linkedin Cookies\r\n\t\t\t\t</button>\r\n\t\t\t\t\r\n\t\t\t\t{ /*<AudioRetrieval />*/ }\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t) : (\r\n\t\t\r\n\t\t\t<ProfileSearch cookie={cookie} />\r\n\t\t\r\n\t\t)}\r\n\t\t</>\r\n\t\t\r\n\t);\r\n\r\n}\r\nexport default LinkedinCookie;","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\AudioRetrieval.js",["66"],[],"/*global chrome*/\r\nimport React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction AudioRetrieval() {\r\n\t\r\n\tconst [transcriptTextArea, setTranscriptTextArea] = useState(\"\");\r\n\tconst transcriptTextAreaRef = useRef(null);\r\n\t\r\n\tconst handleStartCapture = () => {\r\n\t\t\r\n\t\tchrome.tabCapture.capture({audio: true}, function(stream) {\r\n\t\t\t\r\n\t\t\tconst audioContext = new AudioContext();\r\n\r\n\t\t\tconst mediaStreamSource = audioContext.createMediaStreamSource(stream);\r\n\t\t\tmediaStreamSource.connect(audioContext.destination);\r\n\r\n\t\t\t// Set up the speech recognition object\r\n\t\t\tconst SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\r\n\t\t\tconst recognition = new SpeechRecognition();\r\n\t\t\t\r\n\t\t\trecognition.continuous = true;\r\n\t\t\trecognition.interimResults = true;\r\n\t\t\trecognition.lang = 'en-US';\r\n\t\t\trecognition.listening = true;\r\n\t\t\t\r\n\t\t\trecognition.start();\r\n\r\n\t\t\t// Process the speech recognition results\r\n\t\t\trecognition.onresult = function(event) {\r\n\t\t\t\tlet eventText = \"\";\r\n\t\t\t\tfor (let i = 0; i < event.results.length; i++) {\r\n\t\t\t\t\teventText += event.results[i][0].transcript;\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(eventText);\r\n\t\t\t\ttranscriptTextAreaRef.current.value = eventText;\r\n\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t});\r\n\t\t\r\n\t};\r\n\t\r\n\tconst handleSendingToAI = async() => {\r\n\t\tconst prompt = \"This is a question asked by a person: \"\r\n\t\t+ \" Give an answer in bullet points. Try not to be verbose: \" + transcriptTextAreaRef.current.value;\r\n\t\tconsole.log(prompt);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\t\r\n\t\t\tsetTranscriptTextArea(data.message);\t\t\t\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\t\t\r\n\tconst handleTranscriptTextAreaChange = (event) => {\r\n\t\tsetTranscriptTextArea(event.target.value);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t<button onClick={handleStartCapture}>\r\n\t\t\tStart audio capture\r\n\t\t</button>\r\n\t\t<button onClick={handleSendingToAI}>\r\n\t\t\tSend to AI\r\n\t\t</button>\r\n\t\t<textarea ref={transcriptTextAreaRef} value={transcriptTextArea} onChange={handleTranscriptTextAreaChange} placeholder=\"The transcript will appear here\"></textarea>\r\n\t\t</>\r\n\t);\r\n\r\n}\r\nexport default AudioRetrieval;","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayConvos.js",["67","68"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport DisplayThread from \"./DisplayThread.js\";\r\n\r\nfunction DisplayConvos(props) {\r\n\t\r\n\tconst {cookie} = props;\r\n\t\r\n\tconst [threadArray, setThreadArray] = useState([]);\r\n\tconst [threadName, setThreadName] = useState(null);\r\n\tconst [threadId, setThreadId] = useState(null);\r\n\r\n\tuseEffect( () => {\r\n\t\tconst handleGetThreads = async () => {\r\n\t\t\tconst response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-threads', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst thread = data.message;\r\n\t\t\tsetThreadArray(thread);\r\n\t\t};\t\r\n\t\thandleGetThreads();\r\n\t}, []);\r\n\t\t\r\n\t\t\r\n\tconst handleThreadClick = (threadName) => {\r\n\t\tsetThreadName(threadName[0]);\r\n\t\tsetThreadId(threadName[1]);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t{ (threadName && threadId) ? (\r\n\t\t\t<DisplayThread cookie={cookie} threadName={threadName} threadId={threadId} />\r\n\t\t) : (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Messages</h1>\r\n\t\t\t\r\n\t\t\t\t{threadArray.length > 0 && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t{threadArray.map( (threadName) => (\r\n\t\t\t\t\t\t<button onClick={() => handleThreadClick(threadName)}>{threadName[0]}</button>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)}\r\n\t\t</>\r\n\t)\r\n\r\n}\r\nexport default DisplayConvos;\r\n\r\n\t// const handleGetMessages = async (profileUrn) => {\r\n\t\t// const response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\r\n\t\t\t// method: 'POST',\r\n\t\t\t// headers: {\r\n\t\t\t\t// 'Content-Type': 'application/json',\r\n\t\t\t// },\r\n\t\t\t// body: JSON.stringify({\r\n\t\t\t\t// cookie: cookie,\r\n\t\t\t\t// profileUrn: profileUrn\r\n\t\t\t// })\r\n\t\t// });\r\n\r\n\t\t// const data = await response.json();\r\n\t\t// const message = data.message;\r\n\t\t// setMessageArray(message);\r\n\r\n\t// };\r\n\r\n\r\n// document.getElementById(\"MessagesButton\").onclick = function() {\r\n\r\n// fetch(\"https://ai-assistant.herokuapp.com/get-convo-threads\", {\r\n\t// method: \"POST\",\r\n\t// headers: {\r\n\t\t// \"Content-Type\": \"application/json\"\r\n\t// },\r\n\t// body: JSON.stringify({\r\n\t\t// email: email,\r\n\t\t// password: password,\r\n\t\t// cookie: cookie\r\n\t// })\r\n// })\r\n// .then(response => response.json())\r\n// .then(data => {\r\n\r\n\t// console.log(\"Successfully gotten conversation threads\", data.message);\r\n\t// var words = data.message;\r\n\t// var container = document.getElementById('ThreadsContainer');\r\n\r\n\t// for (var i = 0; i < words.length; i++) {\r\n\r\n\t\t// var button = document.createElement('input');\r\n\t\t// button.type = 'button';\r\n\t\t// button.value = words[i][0];\r\n\t\t// button.id = words[i][1];\r\n\t\t// button.className = \"OpenConvoButton\";\r\n\t\t// var label = document.createElement('label');\r\n\t\t// label.textContent = words[i][0];\r\n\t\t// label.appendChild(button);\r\n\t\t// container.appendChild(label);\r\n\t// }\r\n\t// const convoButtons = document.querySelectorAll('.OpenConvoButton');\r\n\t// convoButtons.forEach(function(button) {\r\n\t\t// button.addEventListener('click', function() {\r\n\r\n\t\t\t// // Clear the buttons, create a header of button.value\r\n\t\t\t// container.style.display = \"none\";\r\n\t\t\t// var msg_container = document.getElementById(\"MessagesContainer\");\r\n\t\t\t// var new_h1 = document.createElement(\"h1\")\r\n\t\t\t// new_h1.innerHTML = button.value;\r\n\r\n\t\t\t// msg_container.appendChild(new_h1);\r\n\r\n\t\t\t// // Display the messages, create a textarea with \"Get Interests\" and \"Generate Message\" button\r\n\t\t\t// fetch(\"https://ai-assistant.herokuapp.com/get-convo-messages\", {\r\n\r\n\t\t\t\t\t// method: \"POST\",\r\n\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t// \"Content-Type\": \"application/json\"\r\n\t\t\t\t\t// },\r\n\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t// email: email,\r\n\t\t\t\t\t\t// password: password,\r\n\t\t\t\t\t\t// cookie: cookie,\r\n\t\t\t\t\t\t// profileUrn: button.id\r\n\t\t\t\t\t// })\r\n\t\t\t\t// })\r\n\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// console.log(\"Successfully gotten messages\", data.message);\r\n\r\n\t\t\t\t\t// var new_p = document.createElement(\"p\");\r\n\t\t\t\t\t// new_p.textContent = data.message;\r\n\t\t\t\t\t// new_p.style.color = \"white\";\r\n\r\n\t\t\t\t\t// var new_textarea = document.createElement(\"textarea\");\r\n\t\t\t\t\t// new_textarea.id = \"messageTextbox\";\r\n\t\t\t\t\t// var generate_interests_button = document.createElement(\"button\");\r\n\t\t\t\t\t// generate_interests_button.textContent = \"Get Interests\";\r\n\t\t\t\t\t// var generate_message_button = document.createElement(\"button\");\r\n\t\t\t\t\t// generate_message_button.textContent = \"Generate Message\";\r\n\r\n\t\t\t\t\t// var send_message_button = document.createElement(\"button\");\r\n\t\t\t\t\t// send_message_button.textContent = \"Send Message\";\r\n\r\n\t\t\t\t\t// msg_container.appendChild(new_p);\r\n\t\t\t\t\t// msg_container.appendChild(new_textarea);\r\n\t\t\t\t\t// msg_container.appendChild(generate_interests_button);\r\n\t\t\t\t\t// msg_container.appendChild(generate_message_button);\r\n\t\t\t\t\t// msg_container.appendChild(send_message_button);\t\r\n\r\n\t\t\t\t\t// generate_interests_button.onclick = function() {\r\n\r\n\t\t\t\t\t\t// fetch(\"https://ai-assistant.herokuapp.com/get-interests-from-thread\", {\r\n\t\t\t\t\t\t\t\t// method: \"POST\",\r\n\t\t\t\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t\t\t\t// \"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t\t// },\r\n\t\t\t\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t// email: email,\r\n\t\t\t\t\t\t\t\t\t// password: password,\r\n\t\t\t\t\t\t\t\t\t// cookie: cookie,\r\n\t\t\t\t\t\t\t\t\t// publicId: button.id\r\n\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\t\t\t// console.log(\"Successfully gotten interests\", data.message);\r\n\r\n\t\t\t\t\t\t\t\t// var words = data.message;\r\n\t\t\t\t\t\t\t\t// var container = document.getElementById('InterestsContainer');\r\n\r\n\t\t\t\t\t\t\t\t// for (var i = 0; i < words.length; i++) {\r\n\r\n\t\t\t\t\t\t\t\t\t// var checkbox = document.createElement('input');\r\n\t\t\t\t\t\t\t\t\t// checkbox.type = 'checkbox';\r\n\t\t\t\t\t\t\t\t\t// checkbox.value = words[i];\r\n\t\t\t\t\t\t\t\t\t// var label = document.createElement('label');\r\n\t\t\t\t\t\t\t\t\t// label.textContent = words[i];\r\n\t\t\t\t\t\t\t\t\t// label.appendChild(checkbox);\r\n\t\t\t\t\t\t\t\t\t// container.appendChild(label);\r\n\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t// });\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// // If generate_message_button is clicked\r\n\t\t\t\t\t// generate_message_button.onclick = function() {\r\n\r\n\t\t\t\t\t\t// var checkboxes = document.querySelectorAll('input[type=checkbox]');\r\n\t\t\t\t\t\t// var topicList = [];\r\n\t\t\t\t\t\t// for (var i = 0; i < checkboxes.length; i++) {\r\n\t\t\t\t\t\t\t// if (checkboxes[i].checked) {\r\n\t\t\t\t\t\t\t\t// var topic = checkboxes[i].value;\r\n\t\t\t\t\t\t\t\t// topicList.push(topic);\r\n\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// var topicListString = topicList.toString();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// var prompt_string = \"Reply to this: \" + data.message;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// fetch('https://api.openai.com/v1/completions', {\r\n\t\t\t\t\t\t\t\t// method: 'POST',\r\n\t\t\t\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t\t\t\t// 'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\t\t\t// 'Authorization': 'Bearer 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'\r\n\t\t\t\t\t\t\t\t// },\r\n\r\n\t\t\t\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t// model: 'text-davinci-003',\r\n\t\t\t\t\t\t\t\t\t// prompt: prompt_string,\r\n\t\t\t\t\t\t\t\t\t// max_tokens: 55,\r\n\t\t\t\t\t\t\t\t\t// temperature: 0.7\r\n\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\t\t// //console.log(JSON.stringify(data));\r\n\t\t\t\t\t\t\t// console.log(data.choices[0].text);\r\n\t\t\t\t\t\t\t// new_textarea.value = data.choices[0].text;\r\n\r\n\t\t\t\t\t\t// }).catch(error => console.error(error));\r\n\r\n\t\t\t\t\t\t// // document.getElementById(\"my-textarea\").value = prompt_string;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// send_message_button.onclick = function() {\r\n\r\n\t\t\t\t\t\t// fetch(\"https://ai-assistant.herokuapp.com/send-message\", {\r\n\t\t\t\t\t\t\t\t// method: \"POST\",\r\n\t\t\t\t\t\t\t\t// headers: {\r\n\t\t\t\t\t\t\t\t\t// \"Content-Type\": \"application/json\"\r\n\t\t\t\t\t\t\t\t// },\r\n\t\t\t\t\t\t\t\t// body: JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t// email: email,\r\n\t\t\t\t\t\t\t\t\t// password: password,\r\n\t\t\t\t\t\t\t\t\t// cookie: cookie,\r\n\t\t\t\t\t\t\t\t\t// profileId: button.id,\r\n\t\t\t\t\t\t\t\t\t// text: new_textarea.value\r\n\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t// .then(response => response.json())\r\n\t\t\t\t\t\t\t// .then(data => {\r\n\t\t\t\t\t\t\t\t// console.log(\"Successfully sent connect to server\", data.message);\r\n\t\t\t\t\t\t\t// });\r\n\t\t\t\t\t// }\r\n\t\t\t\t// }","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayThread.js",["69","70"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\n\r\nfunction DisplayThread(props) {\r\n\t\r\n\tconst {cookie, threadName, threadId} = props;\t\r\n\tconst [convoArray, setConvoArray] = useState([]);\r\n\tconst [replyTextArea, setReplyTextArea] = useState([]);\r\n\r\n\tuseEffect( () => {\r\n\t\t\r\n\t\tconst handleGetSingleThread = async () => {\r\n\t\t\r\n\t\t\tconst response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\tprofileUrn: threadId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst thread = data.message;\r\n\t\t\tsetConvoArray(thread);\r\n\t\t};\t\r\n\t\thandleGetSingleThread();\r\n\t}, []);\r\n\t\r\n\tconst handleMakingReply = async() => {\r\n\t\tconst prompt = \"Reply to this: \" + convoArray;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tsetReplyTextArea(data.message);\t\t\t\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleSendingMessage = async () => {\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-message\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\tprofileId: threadId,\r\n\t\t\t\t\ttext: replyTextArea\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(\"Successfully sent the message to the person\", data.message);\r\n\t\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleReplyTextAreaChange = (event) => {\r\n\t\tsetReplyTextArea(event.target.value);\r\n\t};\r\n\t\t\r\n\treturn (\r\n\t\t<div>\r\n            <h1>{threadName}</h1>\r\n\t\t\t<p>{convoArray}</p>\r\n            <textarea value={replyTextArea} onChange={handleReplyTextAreaChange} placeholder=\"The generated note will appear here\"></textarea>\r\n            <button onClick={handleMakingReply}>Reply</button>\r\n            <button onClick={handleSendingMessage}>Send Message</button>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\nexport default DisplayThread;",{"ruleId":"71","severity":1,"message":"72","line":1,"column":10,"nodeType":"73","messageId":"74","endLine":1,"endColumn":16},{"ruleId":"71","severity":1,"message":"75","line":2,"column":26,"nodeType":"76","messageId":"74","endLine":2,"endColumn":35},{"ruleId":"71","severity":1,"message":"72","line":1,"column":10,"nodeType":"73","messageId":"74","endLine":1,"endColumn":16},{"ruleId":"71","severity":1,"message":"77","line":4,"column":8,"nodeType":"76","messageId":"74","endLine":4,"endColumn":21},{"ruleId":"71","severity":1,"message":"78","line":17,"column":9,"nodeType":"76","messageId":"74","endLine":17,"endColumn":20},{"ruleId":"71","severity":1,"message":"79","line":25,"column":9,"nodeType":"76","messageId":"74","endLine":25,"endColumn":15},{"ruleId":"71","severity":1,"message":"80","line":31,"column":20,"nodeType":"76","messageId":"74","endLine":31,"endColumn":32},{"ruleId":"81","severity":1,"message":"82","line":160,"column":54,"nodeType":"83","messageId":"84","endLine":160,"endColumn":55},{"ruleId":"71","severity":1,"message":"85","line":4,"column":8,"nodeType":"76","messageId":"74","endLine":4,"endColumn":22},{"ruleId":"71","severity":1,"message":"75","line":2,"column":26,"nodeType":"76","messageId":"74","endLine":2,"endColumn":35},{"ruleId":"71","severity":1,"message":"72","line":1,"column":10,"nodeType":"73","messageId":"74","endLine":1,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":30,"column":5,"nodeType":"88","endLine":30,"endColumn":7,"suggestions":"89"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":10,"nodeType":"73","messageId":"74","endLine":1,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":30,"column":5,"nodeType":"88","endLine":30,"endColumn":7,"suggestions":"91"},"no-unused-vars","'chrome' is defined but never used.","Program","unusedVar","'useEffect' is defined but never used.","Identifier","'ProfileSearch' is defined but never used.","'userProfile' is assigned a value but never used.","'skills' is assigned a value but never used.","'setInterests' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'AudioRetrieval' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cookie'. Either include it or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has missing dependencies: 'cookie' and 'threadId'. Either include them or remove the dependency array.",["93"],{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [cookie]",{"range":"98","text":"99"},"Update the dependencies array to be: [cookie, threadId]",{"range":"100","text":"101"},[799,801],"[cookie]",[768,770],"[cookie, threadId]"]