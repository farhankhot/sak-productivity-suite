[{"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\index.js":"1","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\reportWebVitals.js":"2","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedinCookie.js":"3","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ProfileSearch.js":"4","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\CheckJobStatus.js":"5","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js":"6","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayConvos.js":"7","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayThread.js":"8","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedInCookie.js":"9","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\App.js":"10","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\NavbarComponent.js":"11","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\Home.js":"12","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayZoomInfoSearchResults.js":"13","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ZoomInfoSearch.js":"14","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ErrorModal.js":"15"},{"size":676,"mtime":1680014790728,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1679519325616,"results":"18","hashOfConfig":"17"},{"size":1551,"mtime":1679950492878,"results":"19","hashOfConfig":"17"},{"size":4424,"mtime":1683421603710,"results":"20","hashOfConfig":"17"},{"size":746,"mtime":1683426013987,"results":"21","hashOfConfig":"17"},{"size":6227,"mtime":1683421518812,"results":"22","hashOfConfig":"17"},{"size":2180,"mtime":1683421467401,"results":"23","hashOfConfig":"17"},{"size":4839,"mtime":1683421567149,"results":"24","hashOfConfig":"17"},{"size":1551,"mtime":1679951526256,"results":"25","hashOfConfig":"17"},{"size":1636,"mtime":1681133906318,"results":"26","hashOfConfig":"17"},{"size":874,"mtime":1681133153027,"results":"27","hashOfConfig":"17"},{"size":34142,"mtime":1683836225252,"results":"28","hashOfConfig":"17"},{"size":4227,"mtime":1682715346955,"results":"29","hashOfConfig":"17"},{"size":2845,"mtime":1683421623278,"results":"30","hashOfConfig":"17"},{"size":780,"mtime":1683421033221,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"qdkuhp",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\index.js",[],[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedinCookie.js",["86","87","88"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedinCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t// {cookie === \"\" ? (\r\n\t\t// \t<div>\r\n\t\t// \t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1>\r\n\t\t// \t\t<button onClick={handleLinkedinCookie}>Get LinkedIn Cookies</button>\r\n\t\t// \t\t<AudioRetrieval />\r\n\t\t// \t</div>\r\n\t\t// ) : (\r\n\t\t// \t<div>\r\n\t\t// \t\t<button onClick={() => window.open( \"https://sak-productivity-suite.herokuapp.com/dashboard\") }>Open Dashboard</button>\r\n\t\t// \t\t<Route exact path=\"/dashboard\" element={<ProfileSearch />} />\r\n\t\t// \t</div>\r\n\t\t// )}\r\n\t\t<>\r\n\t\t<Router>\r\n\t\t\t<Route path=\"/dashboard\" element={<ProfileSearch />} />\t\t\t\r\n\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default LinkedinCookie;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ProfileSearch.js",["89","90"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nimport './ProfileSearch.css';\r\nimport ErrorModal from \"./ErrorModal.js\";\r\n\r\nfunction ProfileSearch(props) {\r\n\t\r\n\tconst {sessionId} = props;\r\n\t// console.log(\"ProfileSearch\", sessionId);\r\n\t\r\n\tconst [leadName, setLeadName] = useState(\"\");\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\tconst [currentCompany, setCurrentCompany] = useState(\"\");\r\n\t\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\t\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst navigate = useNavigate();\r\n\tconst [error, setError] = useState(null);\r\n\t\t\r\n\tconst handleSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/search-leads-in-db\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tleadName: leadName,\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tcurrentCompany: currentCompany,\r\n\t\t\t\t\tlocation: location\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tsetIsLoading(true);\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tif (data.success === true) {\r\n\t\t\t\t\tconst resultArray = data.message;\r\n\t\t\t\t\tsetResultArray(resultArray);\t\r\n\t\t\t\t\tsetJobFinished(true);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"error occurred\");\r\n\t\t\tsetError(\"error occurred\");\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{error && <ErrorModal errorMessage={error} onClose={() => setError(null)} />}\r\n\r\n\t\t\t{jobFinished === true ? (\r\n\t\t\t\tnavigate(\"/display-linkedin-search-results\", {state: {sessionId: sessionId, resultArray: resultArray} })\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"search-form-container\">\r\n\t\t\t\t\t\t<Form className=\"search-form\">\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter name\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={leadName}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLeadName(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe name you want to search (Optional)\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter position\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe position you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formCurrentCompany\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter current company\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\t\t\tvalue={currentCompany}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setCurrentCompany(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tWhich company's employees do you want to search?\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formLocation\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Enter location\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={location} \r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLocation(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe location you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"button\" onClick={handleSearchRequest}>\r\n\t\t\t\t\t\t\t\t{isLoading ? 'Results Loading...' : 'Search'}\r\n\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n}\r\nexport default ProfileSearch;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\CheckJobStatus.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js",["91"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ErrorModal from \"./ErrorModal.js\";\r\n\r\nfunction DisplaySearchResults() {\r\n\t\r\n\tconst location = useLocation();\r\n\tconst sessionId = location.state?.sessionId;\r\n\tconst resultArray = location.state?.resultArray;\r\n\t// console.log(\"DisplaySearchResults sessionId: \", sessionId);\r\n\tconst [error, setError] = useState(null);\r\n\t\t\r\n\t// TODO: May come a time where results are more than 50, will cause error\r\n\t// Solution: have useEffect and check the length of the resultArray before allocating array size\r\n\tconst [peopleInterestsArray, setPeopleInterestsArray] = useState(Array.from({length: 50}, () => []));\r\n\tconst [companyInterestsArray, setCompanyInterestsArray] = useState(Array.from({length: 50}, () => []));\r\n\t// const [activityInterestsArray, setActivityInterestsArray] = useState([]);\r\n\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst [showProfileArea, setShowProfileArea] = useState(false);\r\n\tconst [profileInfoArray, setProfileInfoArray] = useState([]);\r\n\t\t\r\n\tuseEffect(() => {\r\n\t\tsetProfileInfoArray(resultArray);\r\n\t}, [resultArray]);\t\r\n\t\t\r\n\tconst handleGettingPeopleInterests = async (sessionId, profileUrnStr, index) => {\t\t\r\n\t\tconst startIndex = profileUrnStr.indexOf(\"(\") + 1;\r\n\t\tconst endIndex = profileUrnStr.indexOf(\",\");\r\n\t\tconst profileUrn = profileUrnStr.substring(startIndex, endIndex);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tconst data = await response.json();\t\t\t\r\n\t\t\t\tif (data.success === true){\r\n\t\t\t\t\tconst jobId = data.message;\r\n\t\t\t\t\t\r\n\t\t\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\t\t\tsetIsLoading(false);\r\n\t\t\t\t\t\tconst newArray = [...peopleInterestsArray];\r\n\t\t\t\t\t\tfor (let i = 0; i < resultArray.length; i++){\r\n\t\t\t\t\t\t\tnewArray[index].push(resultArray[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsetPeopleInterestsArray(newArray);\t\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tsetError(\"error occurred\");\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleGettingCompanyInterests = async (sessionId, profileUrnStr, index) => {\r\n\t\t\r\n\t\t// setIsLoading(true);\r\n\r\n\t\tconst startIndex = profileUrnStr.indexOf(\"(\") + 1;\r\n\t\tconst endIndex = profileUrnStr.indexOf(\",\");\r\n\t\tconst profileUrn = profileUrnStr.substring(startIndex, endIndex);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tif (data.success === true){\r\n\t\t\t\t\tconst jobId = data.message;\r\n\t\t\t\t\t\r\n\t\t\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\t\t\tsetIsLoading(false);\r\n\t\t\t\t\t\tconst newArray = [...companyInterestsArray];\r\n\t\t\t\t\t\tfor (let i = 0; i < resultArray.length; i++){\r\n\t\t\t\t\t\t\tnewArray[index].push(resultArray[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsetCompanyInterestsArray(newArray);\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"error occurred\");\r\n\t\t\tsetError(\"error occurred\");\r\n\t\t}\r\n\t};\r\n\t\t\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{error && <ErrorModal errorMessage={error} onClose={() => setError(null)} />}\r\n\r\n\t\t\t<Container>\r\n\t\t\t\t<h1>Search Results:</h1>\r\n\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t{profileInfoArray.map((leadInfo, index) => (\r\n\t\t\t\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t{leadInfo[0]}, {leadInfo[1]} at {leadInfo[2]}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t{showProfileArea && (\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<ButtonGroup aria-label=\"Basic example\" className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleGettingPeopleInterests(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tGet people interests\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleGettingCompanyInterests(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tGet company interests\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</ButtonGroup>\r\n\r\n\t\t\t\t\t\t\t\t\t\t{peopleInterestsArray[index].length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tmultiple>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{peopleInterestsArray[index].map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t{companyInterestsArray[index].length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tmultiple>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{companyInterestsArray[index].map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t{/* {activityInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{activityInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t)} */}\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ListGroup>\r\n\t\t\t</Container>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default DisplaySearchResults;\r\n","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayConvos.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayThread.js",["92","93"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport ErrorModal from \"./ErrorModal.js\";\r\n\r\nfunction DisplayThread() {\r\n\r\n\tconst location = useLocation();\r\n\tconst sessionId = location.state?.sessionId;\r\n\tconst threadName = location.state?.threadName;\r\n\tconst threadId = location.state?.threadId;\r\n\r\n\tconst [isLoadingReply, setIsLoadingReply] = useState(null);\t\r\n\t\r\n\tconst [convoArray, setConvoArray] = useState([]);\r\n\tconst [replyTextArea, setReplyTextArea] = useState([]);\r\n\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tuseEffect( () => {\r\n\t\t\r\n\t\tconst getSingleThread = async () => {\r\n\t\t\t// setIsLoadingThread(true);\r\n\t\t\tconst response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tthreadId: threadId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tif (data.success === true) {\r\n\t\t\t\t\tconst thread = data.message;\r\n\t\t\t\t\tsetConvoArray(thread);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t};\t\r\n\t\tgetSingleThread();\r\n\t\t// The 2 lines below deal with auto refresh of messages.\r\n\t\t// Run function every 5 seconds and clearInterval removes the timer after every 5 seconds. \r\n\t\t// This prevents memory leak.\r\n\t\tconst intervalId = setInterval(getSingleThread, 5000);\r\n\t\treturn () => clearInterval(intervalId);\r\n\t}, []);\r\n\t\r\n\tconst handleMakingReply = async() => {\r\n\t\tconst prompt = \"Reply to this: \" + convoArray;\r\n\t\ttry {\r\n\t\t\tsetIsLoadingReply(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-chatgpt\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tif (data.success === true){\r\n\t\t\t\t\tconst jobId = data.message;\r\n\t\t\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\t\t\tsetReplyTextArea(resultArray);\t\r\n\t\t\t\t\t\tsetIsLoadingReply(false);\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t\tsetError(\"error occurred\");\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleSendingMessage = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-message\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileId: threadId,\r\n\t\t\t\t\ttext: replyTextArea\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tif (data.success === true) {\r\n\t\t\t\t\tconsole.log(\"Successfully sent the message to the person\", data.message);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t\tsetError(\"error occurred\");\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleReplyTextAreaChange = (event) => {\r\n\t\tsetReplyTextArea(event.target.value);\r\n\t};\r\n\t\t\r\n\treturn (\r\n\t\t<>\r\n\t\t{error && <ErrorModal errorMessage={error} onClose={() => setError(null)} />}\r\n\t\t\r\n\t\t<Container style={{ paddingTop: '20px', paddingBottom: '20px'}}>\r\n\t\t\t<Card>\r\n\t\t\t\t<Card.Header>\r\n\t\t\t\t<Card.Title>{threadName}</Card.Title>\r\n\t\t\t\t</Card.Header>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t{convoArray.map((message) => (\r\n\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t{message[1]}: {message[0]}\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t))}\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\tstyle={{ height: '150px' }}\r\n\t\t\t\t\tplaceholder=\"Type your message here\"\r\n\t\t\t\t\tvalue={replyTextArea}\r\n\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\thandleReplyTextAreaChange(event);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t\t<ButtonGroup aria-label=\"Basic example\" className=\"mb-2\">\r\n\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\thandleMakingReply()\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{isLoadingReply ? <p>Generating reply...</p> : <p>Generate Reply</p>}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\thandleSendingMessage()\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\tSend Message\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t</Container>\r\n\t\t</>\r\n\t)\r\n}\r\nexport default DisplayThread;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedInCookie.js",["94","95","96"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedInCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t// {cookie === \"\" ? (\r\n\t\t// \t<div>\r\n\t\t// \t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1>\r\n\t\t// \t\t<button onClick={handleLinkedinCookie}>Get LinkedIn Cookies</button>\r\n\t\t// \t\t<AudioRetrieval />\r\n\t\t// \t</div>\r\n\t\t// ) : (\r\n\t\t// \t<div>\r\n\t\t// \t\t<button onClick={() => window.open( \"https://sak-productivity-suite.herokuapp.com/dashboard\") }>Open Dashboard</button>\r\n\t\t// \t\t<Route exact path=\"/dashboard\" element={<ProfileSearch />} />\r\n\t\t// \t</div>\r\n\t\t// )}\r\n\t\t<>\r\n\t\t<Router>\r\n\t\t\t<Route path=\"/dashboard\" element={<ProfileSearch />} />\t\t\t\r\n\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default LinkedInCookie;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\App.js",["97"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { Routes, Route, useLocation} from 'react-router-dom';\r\nimport Home from \"./Home\";\r\nimport DisplayConvos from './DisplayConvos';\r\nimport ProfileSearch from './ProfileSearch';\r\nimport NavbarComponent from './NavbarComponent';\r\nimport DisplaySearchResults from \"./DisplaySearchResults\";\r\nimport DisplayThread from \"./DisplayThread\";\r\nimport ZoomInfoSearch from \"./ZoomInfoSearch\";\r\nimport DisplayZoomInfoSearchResults from \"./DisplayZoomInfoSearchResults\";\r\n\r\nfunction App() {\r\n\r\n    const { search } = useLocation();\r\n    const [sessionId, setSessionId] = useState(\"\");\r\n\r\n    const val = search.split(\"=\")[1];\r\n    useEffect(() => {\r\n\t\tsetSessionId(val);\r\n\t}, []);\r\n\r\n    return (\r\n        <>\r\n        <NavbarComponent />\r\n        <Routes>\r\n            {sessionId && <Route path=\"/\" element={<Home sessionId={sessionId} />} /> }\r\n\r\n            {sessionId && <Route path=\"/linkedin-search\" element={<ProfileSearch sessionId={sessionId} />} /> }\r\n            <Route path=\"/display-linkedin-search-results\" element={<DisplaySearchResults />} /> \r\n            \r\n            {sessionId && <Route path=\"/display-thread\" element={<DisplayThread />} /> }\r\n            {sessionId && <Route path=\"/linkedin-messages\" element={<DisplayConvos sessionId={sessionId} />} /> }\r\n\r\n            {sessionId && <Route path=\"/zoominfo-search\" element={<ZoomInfoSearch sessionId={sessionId} />} /> }\r\n            <Route path=\"/display-zoominfo-search-results\" element={<DisplayZoomInfoSearchResults />} /> \r\n            \r\n            \r\n        </Routes>\r\n        </>\r\n    );\r\n}\r\nexport default App;  ","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\NavbarComponent.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\Home.js",["98","99","100","101","102","103"],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayZoomInfoSearchResults.js",["104","105","106"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\nfunction DisplayZoomInfoSearchResults() {\r\n\t\r\n\tconst location = useLocation();\r\n\tconst resultArray = location.state?.resultArray;\r\n    console.log(\"DisplayZoomInfoSearchResults resultArray: \", resultArray);\r\n\t\t\r\n\tconst [showProfileArea, setShowProfileArea] = useState(false);\r\n\tconst [profileInfoArray, setProfileInfoArray] = useState([]);\r\n\t\t\r\n\tuseEffect(() => {\r\n\t\tsetProfileInfoArray(resultArray);\r\n\t}, [resultArray]);\t\r\n\t\t\r\n\t\t\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<h1>Search Results:</h1>\r\n\t\t\t<ListGroup>\r\n\t\t\t\t\t{profileInfoArray.map((companyInfo, index) => (\r\n\t\t\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\t\t\t\t}}>\r\n                            <h1>{companyInfo.name}</h1>\r\n                            <p>{companyInfo.city}, {companyInfo.country}</p>\r\n                            <p>{companyInfo.descriptionList[0].description}</p>\r\n\t\t\t\t\t\t\t<p>Employee Count: {companyInfo.employeeCount}</p>\r\n                            <p>Revenue Range: {companyInfo.revenueRange}</p>\r\n                            <p>Website: <a href={\"//\" + companyInfo.website} target=\"_blank\">Link</a></p>\r\n                            <Accordion>\r\n                                <Accordion.Item eventKey=\"0\">\r\n                                    <Accordion.Header>Business model</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.businessModel.map((model, index) => (\r\n                                                <li key={index}>{model}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                <Accordion.Item eventKey=\"1\">\r\n                                    <Accordion.Header>Competitors</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.competitors.map((competitor, index) => (\r\n                                                <li key={index}>{competitor.name}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                <Accordion.Item eventKey=\"2\">\r\n                                    <Accordion.Header>Primary Industries</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.primaryIndustry.map((industry, index) => (\r\n                                                <li key={index}>{industry}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                <Accordion.Item eventKey=\"3\">\r\n                                    <Accordion.Header>Sub Unit Industries</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.subUnitIndustries.map((industry, index) => (\r\n                                                <li key={index}>{industry}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                            </Accordion>\r\n  \r\n\t\t\t\t\t\t\t{/* {showProfileArea && (\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)} */}\r\n\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t);\r\n}\r\nexport default DisplayZoomInfoSearchResults;\r\n","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ZoomInfoSearch.js",["107","108","109","110"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nimport './ProfileSearch.css';\r\nimport ErrorModal from \"./ErrorModal.js\";\r\n\r\nfunction ZoomInfoSearch() {\r\n\t\r\n\t// const {sessionId} = props;\r\n\t// console.log(\"ProfileSearch\", sessionId);\r\n\t\r\n\tconst [companyName, setCompanyName] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\t\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\t\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst navigate = useNavigate();\r\n\tconst [error, setError] = useState(null);\r\n\t\t\r\n\tconst handleZoomInfoSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/search-zoominfo\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcompanyName: companyName\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (response.ok){\r\n\t\t\t\tsetIsLoading(true);\r\n\t\t\t\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tif (data.success === true){\r\n\t\t\t\t\t// console.log(data);\r\n\t\t\t\t\tconst resultArray = data['data']['result'][0]['data'];\r\n\t\t\t\t\t// console.log(resultArray);\r\n\t\r\n\t\t\t\t\tsetResultArray(resultArray);\t\r\n\t\t\t\t\tsetJobFinished(true);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"an error occurred\");\r\n\t\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tconsole.log(\"error occurred\");\r\n\t\t\t\tsetError(\"error occurred\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"error occurred\");\r\n\t\t\tsetError(\"error occurred\");\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{error && <ErrorModal errorMessage={error} onClose={() => setError(null)} />}\r\n\r\n\t\t\t{jobFinished === true ? (\r\n\t\t\t\tnavigate(\"/display-zoominfo-search-results\", {state: {resultArray: resultArray} })\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"search-form-container\">\r\n\t\t\t\t\t\t<Form className=\"search-form\">\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter Company name\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={companyName}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setCompanyName(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tCompany name you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"button\" onClick={handleZoomInfoSearchRequest}>\r\n\t\t\t\t\t\t\t\t{isLoading ? 'Results Loading...' : 'Search'}\r\n\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n}\r\nexport default ZoomInfoSearch;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ErrorModal.js",[],[],{"ruleId":"111","severity":1,"message":"112","line":3,"column":35,"nodeType":"113","messageId":"114","endLine":3,"endColumn":41},{"ruleId":"111","severity":1,"message":"115","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":22},{"ruleId":"111","severity":1,"message":"116","line":18,"column":8,"nodeType":"113","messageId":"114","endLine":18,"endColumn":28},{"ruleId":"111","severity":1,"message":"117","line":1,"column":26,"nodeType":"113","messageId":"114","endLine":1,"endColumn":35},{"ruleId":"111","severity":1,"message":"118","line":2,"column":9,"nodeType":"113","messageId":"114","endLine":2,"endColumn":23},{"ruleId":"111","severity":1,"message":"119","line":24,"column":9,"nodeType":"113","messageId":"114","endLine":24,"endColumn":18},{"ruleId":"111","severity":1,"message":"120","line":8,"column":23,"nodeType":"113","messageId":"114","endLine":8,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":59,"column":5,"nodeType":"123","endLine":59,"endColumn":7,"suggestions":"124"},{"ruleId":"111","severity":1,"message":"112","line":3,"column":35,"nodeType":"113","messageId":"114","endLine":3,"endColumn":41},{"ruleId":"111","severity":1,"message":"115","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":22},{"ruleId":"111","severity":1,"message":"116","line":18,"column":8,"nodeType":"113","messageId":"114","endLine":18,"endColumn":28},{"ruleId":"121","severity":1,"message":"125","line":20,"column":5,"nodeType":"123","endLine":20,"endColumn":7,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"127","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":21},{"ruleId":"111","severity":1,"message":"128","line":29,"column":9,"nodeType":"113","messageId":"114","endLine":29,"endColumn":24},{"ruleId":"111","severity":1,"message":"129","line":29,"column":26,"nodeType":"113","messageId":"114","endLine":29,"endColumn":44},{"ruleId":"111","severity":1,"message":"130","line":45,"column":9,"nodeType":"113","messageId":"114","endLine":45,"endColumn":19},{"ruleId":"111","severity":1,"message":"131","line":55,"column":9,"nodeType":"113","messageId":"114","endLine":55,"endColumn":22},{"ruleId":"111","severity":1,"message":"132","line":185,"column":12,"nodeType":"113","messageId":"114","endLine":185,"endColumn":22},{"ruleId":"111","severity":1,"message":"127","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":21},{"ruleId":"111","severity":1,"message":"128","line":13,"column":9,"nodeType":"113","messageId":"114","endLine":13,"endColumn":24},{"ruleId":"133","severity":1,"message":"134","line":35,"column":41,"nodeType":"135","messageId":"136","endLine":35,"endColumn":94,"fix":"137"},{"ruleId":"111","severity":1,"message":"117","line":1,"column":26,"nodeType":"113","messageId":"114","endLine":1,"endColumn":35},{"ruleId":"111","severity":1,"message":"118","line":2,"column":9,"nodeType":"113","messageId":"114","endLine":2,"endColumn":23},{"ruleId":"111","severity":1,"message":"138","line":18,"column":9,"nodeType":"113","messageId":"114","endLine":18,"endColumn":17},{"ruleId":"111","severity":1,"message":"139","line":18,"column":19,"nodeType":"113","messageId":"114","endLine":18,"endColumn":30},"no-unused-vars","'Routes' is defined but never used.","Identifier","unusedVar","'AudioRetrieval' is defined but never used.","'handleLinkedinCookie' is assigned a value but never used.","'useEffect' is defined but never used.","'CheckJobStatus' is defined but never used.","'isLoading' is assigned a value but never used.","'ListGroup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sessionId' and 'threadId'. Either include them or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has a missing dependency: 'val'. Either include it or remove the dependency array.",["141"],"'ButtonGroup' is defined but never used.","'showProfileArea' is assigned a value but never used.","'setShowProfileArea' is assigned a value but never used.","'jobIdArray' is assigned a value but never used.","'numberOfPages' is assigned a value but never used.","'jobIdCheck' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"142","text":"143"},"'location' is assigned a value but never used.","'setLocation' is assigned a value but never used.",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},[1362,1362]," rel=\"noreferrer\"","Update the dependencies array to be: [sessionId, threadId]",{"range":"148","text":"149"},"Update the dependencies array to be: [val]",{"range":"150","text":"151"},[1918,1920],"[sessionId, threadId]",[718,720],"[val]"]