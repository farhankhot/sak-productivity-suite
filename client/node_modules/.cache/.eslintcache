[{"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\index.js":"1","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\reportWebVitals.js":"2","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedinCookie.js":"3","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\AudioRetrieval.js":"4","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ProfileSearch.js":"5","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\CheckJobStatus.js":"6","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js":"7","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayConvos.js":"8","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayThread.js":"9","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedInCookie.js":"10","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\App.js":"11","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\NavbarComponent.js":"12"},{"size":676,"mtime":1680014790728,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1679519325616,"results":"15","hashOfConfig":"14"},{"size":1551,"mtime":1679950492878,"results":"16","hashOfConfig":"14"},{"size":2323,"mtime":1679519325601,"results":"17","hashOfConfig":"14"},{"size":3893,"mtime":1680065199550,"results":"18","hashOfConfig":"14"},{"size":652,"mtime":1679519325616,"results":"19","hashOfConfig":"14"},{"size":8078,"mtime":1680122397290,"results":"20","hashOfConfig":"14"},{"size":1619,"mtime":1680126857478,"results":"21","hashOfConfig":"14"},{"size":2522,"mtime":1680188078298,"results":"22","hashOfConfig":"14"},{"size":1551,"mtime":1679951526256,"results":"23","hashOfConfig":"14"},{"size":1128,"mtime":1680122452537,"results":"24","hashOfConfig":"14"},{"size":792,"mtime":1680063074002,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"qdkuhp",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\index.js",[],[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedinCookie.js",["70","71","72"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedinCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t// {cookie === \"\" ? (\r\n\t\t// \t<div>\r\n\t\t// \t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1>\r\n\t\t// \t\t<button onClick={handleLinkedinCookie}>Get LinkedIn Cookies</button>\r\n\t\t// \t\t<AudioRetrieval />\r\n\t\t// \t</div>\r\n\t\t// ) : (\r\n\t\t// \t<div>\r\n\t\t// \t\t<button onClick={() => window.open( \"https://sak-productivity-suite.herokuapp.com/dashboard\") }>Open Dashboard</button>\r\n\t\t// \t\t<Route exact path=\"/dashboard\" element={<ProfileSearch />} />\r\n\t\t// \t</div>\r\n\t\t// )}\r\n\t\t<>\r\n\t\t<Router>\r\n\t\t\t<Route path=\"/dashboard\" element={<ProfileSearch />} />\t\t\t\r\n\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default LinkedinCookie;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\AudioRetrieval.js",["73"],[],"/*global chrome*/\r\nimport React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction AudioRetrieval() {\r\n\t\r\n\tconst [transcriptTextArea, setTranscriptTextArea] = useState(\"\");\r\n\tconst transcriptTextAreaRef = useRef(null);\r\n\t\r\n\tconst handleStartCapture = () => {\r\n\t\t\r\n\t\tchrome.tabCapture.capture({audio: true}, function(stream) {\r\n\t\t\t\r\n\t\t\tconst audioContext = new AudioContext();\r\n\r\n\t\t\tconst mediaStreamSource = audioContext.createMediaStreamSource(stream);\r\n\t\t\tmediaStreamSource.connect(audioContext.destination);\r\n\r\n\t\t\t// Set up the speech recognition object\r\n\t\t\tconst SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\r\n\t\t\tconst recognition = new SpeechRecognition();\r\n\t\t\t\r\n\t\t\trecognition.continuous = true;\r\n\t\t\trecognition.interimResults = true;\r\n\t\t\trecognition.lang = 'en-US';\r\n\t\t\trecognition.listening = true;\r\n\t\t\t\r\n\t\t\trecognition.start();\r\n\r\n\t\t\t// Process the speech recognition results\r\n\t\t\trecognition.onresult = function(event) {\r\n\t\t\t\tlet eventText = \"\";\r\n\t\t\t\tfor (let i = 0; i < event.results.length; i++) {\r\n\t\t\t\t\teventText += event.results[i][0].transcript;\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(eventText);\r\n\t\t\t\ttranscriptTextAreaRef.current.value = eventText;\r\n\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t});\r\n\t\t\r\n\t};\r\n\t\r\n\tconst handleSendingToAI = async() => {\r\n\t\tconst prompt = \"This is a conversation with a person: \"\r\n\t\t+ \" Answer in a sentence or two. Do not be verbose: \" + transcriptTextAreaRef.current.value;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-chatgpt\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\t\r\n\t\t\tsetTranscriptTextArea(data.message);\t\t\t\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\t\t\r\n\tconst handleTranscriptTextAreaChange = (event) => {\r\n\t\tsetTranscriptTextArea(event.target.value);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t<button onClick={handleStartCapture}>\r\n\t\t\tStart audio capture\r\n\t\t</button>\r\n\t\t<button onClick={handleSendingToAI}>\r\n\t\t\tSend to AI\r\n\t\t</button>\r\n\t\t<textarea ref={transcriptTextAreaRef} value={transcriptTextArea} onChange={handleTranscriptTextAreaChange} placeholder=\"The transcript will appear here\"></textarea>\r\n\t\t</>\r\n\t);\r\n\r\n}\r\nexport default AudioRetrieval;",[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ProfileSearch.js",["74"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nimport './ProfileSearch.css';\r\n\r\nfunction ProfileSearch(props) {\r\n\t\r\n\tconst {sessionId} = props;\r\n\t// console.log(\"ProfileSearch\", sessionId);\r\n\t\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\tconst [currentCompany, setCurrentCompany] = useState(\"\");\r\n\tconst [mutualConnectionsBoolean, setMutualConnectionsBoolean] = useState(false);\r\n\t\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\t\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst navigate = useNavigate();\r\n\t\t\r\n\tconst handleSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/receive-link\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tlocation: location,\r\n\t\t\t\t\tcurrentCompany: currentCompany,\r\n\t\t\t\t\tmutualConnections: mutualConnectionsBoolean\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetResultArray(resultArray);\t\r\n\t\t\t\tsetJobFinished(true);\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{jobFinished === true ? (\r\n\t\t\t\tnavigate(\"/display-linkedin-search-results\", {state: {sessionId: sessionId, resultArray: resultArray} })\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"search-form-container\">\r\n\t\t\t\t\t\t<Form className=\"search-form\">\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter a position\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe position you want to search.\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formLocation\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Enter a location\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={location} \r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLocation(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe location you want to search in\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formCurrentCompany\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter the company\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\t\t\tvalue={currentCompany}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setCurrentCompany(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe company's employees you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formMutualConnections\">\r\n\t\t\t\t\t\t\t\t<Form.Check \r\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\tlabel=\"Search only mutual connections\"\r\n\t\t\t\t\t\t\t\t\tvalue={mutualConnectionsBoolean} \r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setMutualConnectionsBoolean(e.target.value)} />\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"button\" onClick={handleSearchRequest}>\r\n\t\t\t\t\t\t\t\t{isLoading ? 'Loading...' : 'Search'}\r\n\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n}\r\nexport default ProfileSearch;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\CheckJobStatus.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js",["75","76","77","78","79","80","81","82"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ButtonGroup, ListGroup, ListGroupItem } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n// Move peopleInterests, companyInterests and activityInterests to 3 separate components?\r\n// Make every result a component?\r\n// Move making note to a separate component?\r\n\r\nfunction DisplaySearchResults() {\r\n\t\r\n\tconst location = useLocation();\r\n\tconst sessionId = location.state?.sessionId;\r\n\tconst resultArray = location.state?.resultArray;\r\n\t// console.log(\"DisplaySearchResults sessionId: \", sessionId);\r\n\t\r\n\t// Need to get this information, for now backend is not returning it\r\n\tconst [summary, setSummary] = useState(\"\");\r\n\tconst [skills, setSkills] = useState(\"\");\r\n\r\n\tconst [noteTextArea, setNoteTextArea] = useState(\"\"); \r\n\t\r\n\tconst [peopleInterestsArray, setPeopleInterestsArray] = useState([]);\t\r\n\tconst [companyInterestsArray, setCompanyInterestsArray] = useState([]);\t\r\n\tconst [activityInterestsArray, setActivityInterestsArray] = useState([]);\r\n\tconst [selectedInterests, setSelectedInterests] = useState(\"\");\r\n\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst [showProfileArea, setShowProfileArea] = useState(false);\r\n\tconst [profileInfoArray, setProfileInfoArray] = useState([]);\r\n\r\n\tconst [selectedName, setSelectedName] = useState(\"\");\r\n\t\r\n\tuseEffect(() => {\r\n\t\t\r\n\t\t// Change temp to JSON \r\n\t\tconst temp = []\r\n\t\tfor (let i = 0; i < resultArray.length; i += 1) {\r\n\t\t\ttemp.push([ \r\n\t\t\t\tresultArray[i][\"full_name\"],\r\n\t\t\t\tresultArray[i][\"latest_title\"],\r\n\t\t\t\tresultArray[i][\"profile_id\"],\r\n\t\t\t\tresultArray[i][\"public_id\"],\r\n\t\t\t\tresultArray[i][\"profile_urn\"]\r\n\t\t\t])\r\n\t\t}\r\n\t\tsetProfileInfoArray(temp);\r\n\t}, [resultArray]);\t\r\n\t\t\r\n\tconst handleGettingPeopleInterests = async (sessionId, profileUrn) => {\r\n\t\tsetIsLoading(true);\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\t\t\t\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (peopleInterestsArray) => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tsetPeopleInterestsArray(peopleInterestsArray);\t\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleGettingCompanyInterests = async (sessionId, profileUrn, publicId) => {\r\n\t\tsetIsLoading(true);\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn,\r\n\t\t\t\t\tpublicId: publicId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (companyInterestsArray) => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tsetCompanyInterestsArray(companyInterestsArray);\t\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\t// const handleGettingActivityInterests = () => {\r\n\t\t// // TODO\r\n\t// };\r\n\t\r\n\tconst handleInterestsSelection = (event) => {\r\n\t\t\r\n\t\tvar selections = event.target.options;\r\n\t\tconst updatedInterestsArray = [];\r\n\t\tfor (var i = 0; i < selections.length; i++){\r\n\t\t\tif(selections[i].selected){\r\n\t\t\t\tupdatedInterestsArray.push(selections[i].value);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetSelectedInterests(updatedInterestsArray);\r\n\t}\r\n\t\r\n\tconst handleMakingConnectNote = async (fullName) => {\r\n\t\t\r\n\t\t// TODO: Add summary back\r\n\t\tconst prompt = \"This is the profile of a person: \" + \"\\n\" + fullName \r\n\t\t+ \" This is their summary: \" +\r\n\t\t\" These are their interests: \" + selectedInterests \r\n\t\t+ \" Use the internet to get something useful about the interests and use it in the request. \"\r\n\t\t+ \" Write a request to connect with them. Make it casual but eyecatching. The goal is to ask about their current Salesforce implementation. The length should be no more than 300 characters.\";\r\n\t\tsetIsLoading(true);\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tsetNoteTextArea(resultArray);\t\r\n\t\t\t});\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleSendingConnectNote = async (sessionId, profileId) => {\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-connect\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileId: profileId,\r\n\t\t\t\t\ttext: noteTextArea\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(\"Successfully sent the connect note to the person\", data.message);\r\n\t\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleNoteTextAreaChange = (event) => {\r\n\t\tsetNoteTextArea(event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<h1>Search Results:</h1>\r\n\t\t\t<ListGroup>\r\n\t\t\t\t{profileInfoArray.map((profileInfo) => (\r\n\t\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\t\taction\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\t\t\t\tsetSelectedName(profileInfo[0]);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{profileInfo[0]}, {profileInfo[1]}\r\n\t\t\t\t\t\t{showProfileArea && selectedName === profileInfo[0] && (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\t\tvalue={noteTextArea}\r\n\t\t\t\t\t\t\t\t\tonChange={handleNoteTextAreaChange}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"The generated note will appear here\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t\t<ButtonGroup aria-label=\"Basic example\" className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t<Button onClick={handleGettingPeopleInterests(sessionId, profileInfo[4])}>\r\n\t\t\t\t\t\t\t\t\t\tGet people interests\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button onClick={handleGettingCompanyInterests(sessionId, profileInfo[4], profileInfo[3])}>\r\n\t\t\t\t\t\t\t\t\t\tGet company interests\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button onClick={handleMakingConnectNote(profileInfo[0])}>\r\n\t\t\t\t\t\t\t\t\t\tMake Connect Note\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button onClick={handleSendingConnectNote(sessionId, profileInfo[2])}>\r\n\t\t\t\t\t\t\t\t\t\tSend Connect Note\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</ButtonGroup>\r\n\r\n\t\t\t\t\t\t\t\t{peopleInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{peopleInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{companyInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{companyInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{activityInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{activityInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t))}\r\n\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t);\r\n}\r\nexport default DisplaySearchResults;\r\n","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayConvos.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayThread.js",["83"],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedInCookie.js",["84","85","86"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedInCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t// {cookie === \"\" ? (\r\n\t\t// \t<div>\r\n\t\t// \t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1>\r\n\t\t// \t\t<button onClick={handleLinkedinCookie}>Get LinkedIn Cookies</button>\r\n\t\t// \t\t<AudioRetrieval />\r\n\t\t// \t</div>\r\n\t\t// ) : (\r\n\t\t// \t<div>\r\n\t\t// \t\t<button onClick={() => window.open( \"https://sak-productivity-suite.herokuapp.com/dashboard\") }>Open Dashboard</button>\r\n\t\t// \t\t<Route exact path=\"/dashboard\" element={<ProfileSearch />} />\r\n\t\t// \t</div>\r\n\t\t// )}\r\n\t\t<>\r\n\t\t<Router>\r\n\t\t\t<Route path=\"/dashboard\" element={<ProfileSearch />} />\t\t\t\r\n\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default LinkedInCookie;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\App.js",["87"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { Routes, Route, useLocation} from 'react-router-dom';\r\nimport DisplayConvos from './DisplayConvos';\r\nimport ProfileSearch from './ProfileSearch';\r\nimport NavbarComponent from './NavbarComponent';\r\nimport DisplaySearchResults from \"./DisplaySearchResults\";\r\nimport DisplayThread from \"./DisplayThread\";\r\n\r\nfunction App() {\r\n\r\n    const { search } = useLocation();\r\n    const [sessionId, setSessionId] = useState(\"\");\r\n\r\n    const val = search.split(\"=\")[1];\r\n    useEffect(() => {\r\n\t\tsetSessionId(val);\r\n\t}, []);\r\n\r\n    return (\r\n        <>\r\n        <NavbarComponent />\r\n        <Routes>\r\n            {sessionId && <Route path=\"/linkedin-search\" element={<ProfileSearch sessionId={sessionId} />} /> }\r\n            {sessionId && <Route path=\"/linkedin-messages\" element={<DisplayConvos sessionId={sessionId} />} /> }\r\n            <Route path=\"/display-linkedin-search-results\" element={<DisplaySearchResults />} /> \r\n            {sessionId && <Route path=\"/display-thread\" element={<DisplayThread />} /> }\r\n        </Routes>\r\n        </>\r\n    );\r\n}\r\nexport default App;  ","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\NavbarComponent.js",[],[],{"ruleId":"88","severity":1,"message":"89","line":3,"column":35,"nodeType":"90","messageId":"91","endLine":3,"endColumn":41},{"ruleId":"88","severity":1,"message":"92","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":22},{"ruleId":"88","severity":1,"message":"93","line":18,"column":8,"nodeType":"90","messageId":"91","endLine":18,"endColumn":28},{"ruleId":"88","severity":1,"message":"94","line":2,"column":26,"nodeType":"90","messageId":"91","endLine":2,"endColumn":35},{"ruleId":"88","severity":1,"message":"94","line":1,"column":26,"nodeType":"90","messageId":"91","endLine":1,"endColumn":35},{"ruleId":"88","severity":1,"message":"95","line":4,"column":34,"nodeType":"90","messageId":"91","endLine":4,"endColumn":47},{"ruleId":"88","severity":1,"message":"96","line":21,"column":9,"nodeType":"90","messageId":"91","endLine":21,"endColumn":16},{"ruleId":"88","severity":1,"message":"97","line":21,"column":18,"nodeType":"90","messageId":"91","endLine":21,"endColumn":28},{"ruleId":"88","severity":1,"message":"98","line":22,"column":9,"nodeType":"90","messageId":"91","endLine":22,"endColumn":15},{"ruleId":"88","severity":1,"message":"99","line":22,"column":17,"nodeType":"90","messageId":"91","endLine":22,"endColumn":26},{"ruleId":"88","severity":1,"message":"100","line":28,"column":33,"nodeType":"90","messageId":"91","endLine":28,"endColumn":58},{"ruleId":"88","severity":1,"message":"101","line":31,"column":9,"nodeType":"90","messageId":"91","endLine":31,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":128,"column":54,"nodeType":"104","messageId":"105","endLine":128,"endColumn":55},{"ruleId":"106","severity":1,"message":"107","line":34,"column":5,"nodeType":"108","endLine":34,"endColumn":7,"suggestions":"109"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":35,"nodeType":"90","messageId":"91","endLine":3,"endColumn":41},{"ruleId":"88","severity":1,"message":"92","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":22},{"ruleId":"88","severity":1,"message":"93","line":18,"column":8,"nodeType":"90","messageId":"91","endLine":18,"endColumn":28},{"ruleId":"106","severity":1,"message":"110","line":17,"column":5,"nodeType":"108","endLine":17,"endColumn":7,"suggestions":"111"},"no-unused-vars","'Routes' is defined but never used.","Identifier","unusedVar","'AudioRetrieval' is defined but never used.","'handleLinkedinCookie' is assigned a value but never used.","'useEffect' is defined but never used.","'ListGroupItem' is defined but never used.","'summary' is assigned a value but never used.","'setSummary' is assigned a value but never used.","'skills' is assigned a value but never used.","'setSkills' is assigned a value but never used.","'setActivityInterestsArray' is assigned a value but never used.","'isLoading' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sessionId' and 'threadId'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'val'. Either include it or remove the dependency array.",["113"],{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [sessionId, threadId]",{"range":"118","text":"119"},"Update the dependencies array to be: [val]",{"range":"120","text":"121"},[925,927],"[sessionId, threadId]",[566,568],"[val]"]