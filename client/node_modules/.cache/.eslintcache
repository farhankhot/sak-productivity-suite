[{"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\index.js":"1","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\reportWebVitals.js":"2","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedInCookie.js":"3","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\ProfileSearch.js":"4","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\CheckJobStatus.js":"5","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js":"6","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedinCookie.js":"7","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\AudioRetrieval.js":"8","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayConvos.js":"9","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayThread.js":"10"},{"size":541,"mtime":1678902728806,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1678485642725,"results":"13","hashOfConfig":"12"},{"size":31406,"mtime":1678582987951,"results":"14","hashOfConfig":"12"},{"size":2628,"mtime":1678993086515,"results":"15","hashOfConfig":"12"},{"size":652,"mtime":1678579669417,"results":"16","hashOfConfig":"12"},{"size":7298,"mtime":1678910685870,"results":"17","hashOfConfig":"12"},{"size":1223,"mtime":1678737545921,"results":"18","hashOfConfig":"12"},{"size":2354,"mtime":1678842623967,"results":"19","hashOfConfig":"12"},{"size":7980,"mtime":1678994414604,"results":"20","hashOfConfig":"12"},{"size":996,"mtime":1678994150726,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16u4jrs",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\index.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedInCookie.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\ProfileSearch.js",["56","57"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport DisplaySearchResults from \"./DisplaySearchResults.js\";\r\nimport DisplayConvos from \"./DisplayConvos.js\";\r\n\r\n// TODO: Loading animation when waiting for a response\r\n\r\nfunction ProfileSearch(props) {\r\n\t\r\n\tconst {cookie} = props;\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\tconst [currentCompany, setCurrentCompany] = useState(\"\");\r\n\tconst [mutualConnectionsBoolean, setMutualConnectionsBoolean] = useState(false);\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\tconst [navigateToMessages, setNavigateToMessages] = useState(false);\r\n\t\t\r\n\tconst handleSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/receive-link\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tlocation: location,\r\n\t\t\t\t\tcurrentCompany: currentCompany,\r\n\t\t\t\t\tmutualConnections: mutualConnectionsBoolean\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetResultArray(resultArray);\t\r\n\t\t\t\tsetJobFinished(true);\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleMessagesButton = () => {\r\n\t\tsetNavigateToMessages(true);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t{jobFinished === true ? (\r\n\t\t\t<DisplaySearchResults cookie={cookie} resultArray={resultArray} />\r\n\t\t) : (\r\n\t\t\t<>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={handleMessagesButton}>\r\n\t\t\t\t\tMessages\r\n\t\t\t\t</button>\r\n\t\t\t\t{navigateToMessages && <DisplayConvos cookie={cookie} />}\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t{!navigateToMessages && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Enter a title\" value={title} onChange={(e) => setTitle(e.target.value)}  />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Location\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Current Company\" value={currentCompany} onChange={(e) => setCurrentCompany(e.target.value)} />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<input type=\"checkbox\" value={mutualConnectionsBoolean} onChange={(e) => setMutualConnectionsBoolean(e.target.value)} />\r\n\t\t\t\t\t<label for=\"mutualConnectionsBoolean\">\r\n\t\t\t\t\t\tGet Mutual Connections?\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<button onClick={handleSearchRequest}>\r\n\t\t\t\t\t\tSearch\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t</>\r\n\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n\t\r\n}\r\nexport default ProfileSearch;","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\CheckJobStatus.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js",["58","59","60","61","62","63"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\n\r\n// TODO: \r\n// Move peopleInterests, companyInterests and activityInterests to 3 separate components\r\n// Move making note to a separate component\r\n\r\n// Next button still clickable at the last page\r\n\r\nfunction DisplaySearchResults(props) {\r\n\t\r\n\tconst {cookie, resultArray} = props;\r\n\t\r\n\tconst [userProfile, setUserProfile] = useState([]);\r\n\tconst [pageArray, setPageArray] = useState([]);\r\n\tconst [pageIndex, setPageIndex] = useState(0);\r\n\t\r\n\tconst [fullName, setFullName] = useState(\"\");\r\n\tconst [latestTitle, setLatestTitle] = useState(\"\");\r\n\tconst [profileId, setProfileId] = useState(\"\");\r\n\tconst [summary, setSummary] = useState(\"\");\r\n\tconst [skills, setSkills] = useState(\"\");\r\n\tconst [publicId, setPublicId] = useState(\"\");\r\n\tconst [profileUrn, setProfileUrn] = useState(\"\");\r\n\t\r\n\tconst [noteTextArea, setNoteTextArea] = useState(\"\"); \r\n\t\r\n\tconst [interests, setInterests] = useState(\"\"); \r\n\t\r\n\tconst [peopleInterestsArray, setPeopleInterestsArray] = useState([]);\t\r\n\tconst [companyInterestsArray, setCompanyInterestsArray] = useState([]);\t\r\n\tconst [activityInterestsArray, setActivityInterestsArray] = useState([]);\r\n\t\r\n\tconst [selectedInterests, setSelectedInterests] = useState(\"\");\r\n\t\r\n\tuseEffect(() => {\r\n\t\t// Divide the array into pages\r\n\t\tconst pageSize = 1;\r\n\t\tconst pageArray = [];\r\n\t\tfor (let i = 0; i < resultArray.length; i += pageSize) {\r\n\t\t\tpageArray.push(resultArray.slice(i, i + pageSize));\r\n\t\t}\r\n\t\tsetPageArray(pageArray);\r\n\t}, [resultArray]);\t\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\t\r\n\t\tif (pageArray[pageIndex]) {\r\n\t\t\r\n\t\t\tconst userProfile = pageArray[pageIndex][0];\r\n\t\t\tsetUserProfile(userProfile);\r\n\t\t\t\r\n\t\t\tsetFullName(userProfile[\"firstName\"] + \" \" + userProfile[\"lastName\"]);\r\n\t\t\tsetLatestTitle(userProfile[\"headline\"]);\r\n\t\t\tsetProfileId(userProfile[\"profile_id\"]);\r\n\t\t\tsetSummary(userProfile[\"summary\"]);\r\n\t\t\tsetSkills(userProfile[\"skills\"]);\r\n\t\t\tsetPublicId(userProfile[\"public_id\"]);\r\n\t\t\tsetProfileUrn(userProfile[\"profile_urn\"]);\r\n\t\t\t\r\n\t\t\tsetNoteTextArea(\"\");\r\n\t\t\t\r\n\t\t\tsetPeopleInterestsArray([]);\r\n\t\t\tsetCompanyInterestsArray([]);\r\n\t\t\tsetActivityInterestsArray([]);\r\n\t\t\t\r\n\t\t\tsetSelectedInterests(\"\");\r\n\t\t}\r\n\t\t\r\n\t}, [pageIndex, pageArray]);\r\n\r\n\tconst handleNextPage = () => {\r\n\t\tif (pageIndex < pageArray.length - 1) {\r\n\t\t\tsetPageIndex(pageIndex + 1);\r\n\t\t}\r\n\t};\r\n\t\t\r\n\tconst handleGettingPeopleInterests = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(data);\r\n\t\t\t\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (peopleInterestsArray) => {\r\n\t\t\t\tsetPeopleInterestsArray(peopleInterestsArray);\t\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleGettingCompanyInterests = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\tprofileUrn: profileUrn,\r\n\t\t\t\t\tpublicId: publicId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(data);\r\n\t\t\t\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (companyInterestsArray) => {\r\n\t\t\t\tsetCompanyInterestsArray(companyInterestsArray);\t\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleGettingActivityInterests = () => {\r\n\t\t// TODO\r\n\t};\r\n\t\r\n\tconst handleInterestsSelection = (event) => {\r\n\t\t\r\n\t\tvar selections = event.target.options;\r\n\t\tconst updatedInterestsArray = [];\r\n\t\tfor (var i = 0; i < selections.length; i++){\r\n\t\t\tif(selections[i].selected){\r\n\t\t\t\tupdatedInterestsArray.push(selections[i].value);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetSelectedInterests(updatedInterestsArray);\r\n\t}\r\n\t\r\n\tconst handleMakingConnectNote = async () => {\r\n\t\t\r\n\t\tconst prompt = \"This is the profile of a person: \" + \"\\n\" + fullName \r\n\t\t+ \" This is their summary: \" + summary +\r\n\t\t\" These are their interests: \" + selectedInterests \r\n\t\t+ \" Use the internet to get something useful about the interests and use it in the request. \"\r\n\t\t+ \" Write a request to connect with them. Make it casual but eyecatching. The goal is to ask about their current Salesforce implementation. The length should be no more than 70 words.\";\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tsetNoteTextArea(data.message);\t\t\t\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleSendingConnectNote = async () => {\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-connect\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\tprofileId: profileId,\r\n\t\t\t\t\ttext: noteTextArea\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(\"Successfully sent the connect note to the person\", data.message);\r\n\t\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleNoteTextAreaChange = (event) => {\r\n\t\tsetNoteTextArea(event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>{fullName}</div>\r\n\t\t\t<div>{latestTitle}</div>\r\n\t\t\t<textarea value={noteTextArea} onChange={handleNoteTextAreaChange} placeholder=\"The generated note will appear here\"></textarea>\t\r\n\t\t\t\r\n\t\t\t<div>{interests}</div>\r\n\t\t\t\r\n\t\t\t<button onClick={handleGettingPeopleInterests}>\r\n\t\t\t\tGet people interests\r\n\t\t\t</button>\r\n\t\t\t<button onClick={handleGettingCompanyInterests}>\r\n\t\t\t\tGet company interests\r\n\t\t\t</button>\r\n\t\t\t<button onClick={handleGettingActivityInterests}>\r\n\t\t\t\tGet interests from Linkedin activity\r\n\t\t\t</button>\r\n\t\t\t<button onClick={handleNextPage}>\r\n\t\t\t\tNext\r\n\t\t\t</button>\r\n\t\t\t<button onClick={handleMakingConnectNote}>\r\n\t\t\t\tMake Connect Note\r\n\t\t\t</button>\r\n\t\t\t<button onClick={handleSendingConnectNote}>\r\n\t\t\t\tSend Connect Note\r\n\t\t\t</button>\r\n\t\t\r\n\t\t\t{peopleInterestsArray.length > 0 && (\r\n\t\t\t\r\n\t\t\t\t<select multiple onChange={handleInterestsSelection} >\r\n\t\t\t\t\r\n\t\t\t\t\t{peopleInterestsArray.map( (interest) => (\r\n\t\t\t\t\t\t<option key={interest}>{interest}</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t)}\r\n\r\n\t\t\t{companyInterestsArray.length > 0 && (\r\n\t\t\t\r\n\t\t\t\t<select multiple onChange={handleInterestsSelection} >\r\n\t\t\t\t\r\n\t\t\t\t\t{companyInterestsArray.map( (interest) => (\r\n\t\t\t\t\t\t<option key={interest}>{ interest }</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t)}\r\n\t\t\t\r\n\t\t\t{activityInterestsArray.length > 0 && (\r\n\t\t\t\r\n\t\t\t\t<select multiple onChange={handleInterestsSelection} >\r\n\t\t\t\t\r\n\t\t\t\t\t{activityInterestsArray.map( (interest) => (\r\n\t\t\t\t\t\t<option key={interest}>{ interest }</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t)}\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DisplaySearchResults;\r\n","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\LinkedinCookie.js",[],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\AudioRetrieval.js",["64"],[],"/*global chrome*/\r\nimport React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction AudioRetrieval() {\r\n\t\r\n\tconst [transcriptTextArea, setTranscriptTextArea] = useState(\"\");\r\n\tconst transcriptTextAreaRef = useRef(null);\r\n\t\r\n\tconst handleStartCapture = () => {\r\n\t\t\r\n\t\tchrome.tabCapture.capture({audio: true}, function(stream) {\r\n\t\t\t\r\n\t\t\tconst audioContext = new AudioContext();\r\n\r\n\t\t\tconst mediaStreamSource = audioContext.createMediaStreamSource(stream);\r\n\t\t\tmediaStreamSource.connect(audioContext.destination);\r\n\r\n\t\t\t// Set up the speech recognition object\r\n\t\t\tconst SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\r\n\t\t\tconst recognition = new SpeechRecognition();\r\n\t\t\t\r\n\t\t\trecognition.continuous = true;\r\n\t\t\trecognition.interimResults = true;\r\n\t\t\trecognition.lang = 'en-US';\r\n\t\t\trecognition.listening = true;\r\n\t\t\t\r\n\t\t\trecognition.start();\r\n\r\n\t\t\t// Process the speech recognition results\r\n\t\t\trecognition.onresult = function(event) {\r\n\t\t\t\tlet eventText = \"\";\r\n\t\t\t\tfor (let i = 0; i < event.results.length; i++) {\r\n\t\t\t\t\teventText += event.results[i][0].transcript;\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(eventText);\r\n\t\t\t\ttranscriptTextAreaRef.current.value = eventText;\r\n\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t});\r\n\t\t\r\n\t};\r\n\t\r\n\tconst handleSendingToAI = async() => {\r\n\t\tconst prompt = \"This is a question asked by a person: \"\r\n\t\t+ \" Give an answer in bullet points. Try not to be verbose: \" + transcriptTextAreaRef.current.value;\r\n\t\tconsole.log(prompt);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-bingai\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\t\r\n\t\t\tsetTranscriptTextArea(data.message);\t\t\t\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\t\t\r\n\tconst handleTranscriptTextAreaChange = (event) => {\r\n\t\tsetTranscriptTextArea(event.target.value);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t<button onClick={handleStartCapture}>\r\n\t\t\tStart audio capture\r\n\t\t</button>\r\n\t\t<button onClick={handleSendingToAI}>\r\n\t\t\tSend to AI\r\n\t\t</button>\r\n\t\t<textarea ref={transcriptTextAreaRef} value={transcriptTextArea} onChange={handleTranscriptTextAreaChange} placeholder=\"The transcript will appear here\"></textarea>\r\n\t\t</>\r\n\t);\r\n\r\n}\r\nexport default AudioRetrieval;","C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayConvos.js",["65","66"],[],"C:\\Users\\farha\\OneDrive\\Desktop\\sak-productivity-suite\\client\\src\\DisplayThread.js",["67","68","69"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\n\r\nfunction DisplayThread(props) {\r\n\t\r\n\tconst {cookie, threadName, profileUrn} = props;\t\r\n\tconst [convoArray, setConvoArray] = useState([]);\r\n\r\n\tuseEffect( () => {\r\n\t\t\r\n\t\tconst handleGetSingleThread = async () => {\r\n\t\t\r\n\t\t\tconst response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst thread = data.message;\r\n\t\t\tsetConvoArray(thread);\r\n\t\t};\t\r\n\t\thandleGetSingleThread();\r\n\t}, []);\r\n\t\t\r\n\treturn (\r\n\t\t<div>\r\n            <h1>{threadName}</h1>\r\n            <textarea></textarea>\r\n            <button>Get Interests</button>\r\n            <button>Generate Message</button>\r\n            <button>Send Message</button>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\nexport default DisplayThread;",{"ruleId":"70","severity":1,"message":"71","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":2,"column":26,"nodeType":"75","messageId":"73","endLine":2,"endColumn":35},{"ruleId":"70","severity":1,"message":"71","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":16},{"ruleId":"70","severity":1,"message":"76","line":4,"column":8,"nodeType":"75","messageId":"73","endLine":4,"endColumn":21},{"ruleId":"70","severity":1,"message":"77","line":16,"column":9,"nodeType":"75","messageId":"73","endLine":16,"endColumn":20},{"ruleId":"70","severity":1,"message":"78","line":24,"column":9,"nodeType":"75","messageId":"73","endLine":24,"endColumn":15},{"ruleId":"70","severity":1,"message":"79","line":30,"column":20,"nodeType":"75","messageId":"73","endLine":30,"endColumn":32},{"ruleId":"80","severity":1,"message":"81","line":155,"column":54,"nodeType":"82","messageId":"83","endLine":155,"endColumn":55},{"ruleId":"70","severity":1,"message":"74","line":2,"column":26,"nodeType":"75","messageId":"73","endLine":2,"endColumn":35},{"ruleId":"70","severity":1,"message":"71","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":30,"column":5,"nodeType":"86","endLine":30,"endColumn":7,"suggestions":"87"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":16},{"ruleId":"70","severity":1,"message":"88","line":7,"column":9,"nodeType":"75","messageId":"73","endLine":7,"endColumn":19},{"ruleId":"84","severity":1,"message":"89","line":29,"column":5,"nodeType":"86","endLine":29,"endColumn":7,"suggestions":"90"},"no-unused-vars","'chrome' is defined but never used.","Program","unusedVar","'useEffect' is defined but never used.","Identifier","'ProfileSearch' is defined but never used.","'userProfile' is assigned a value but never used.","'skills' is assigned a value but never used.","'setInterests' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cookie'. Either include it or remove the dependency array.","ArrayExpression",["91"],"'convoArray' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cookie' and 'profileUrn'. Either include them or remove the dependency array.",["92"],{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [cookie]",{"range":"97","text":"98"},"Update the dependencies array to be: [cookie, profileUrn]",{"range":"99","text":"100"},[799,801],"[cookie]",[714,716],"[cookie, profileUrn]"]