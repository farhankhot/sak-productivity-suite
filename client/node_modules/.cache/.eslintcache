[{"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\index.js":"1","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\reportWebVitals.js":"2","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedinCookie.js":"3","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\AudioRetrieval.js":"4","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ProfileSearch.js":"5","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\CheckJobStatus.js":"6","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js":"7","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayConvos.js":"8","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayThread.js":"9","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedInCookie.js":"10","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\App.js":"11","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\NavbarComponent.js":"12","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\Home.js":"13","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayZoomInfoSearchResults.js":"14","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ZoomInfoSearch.js":"15"},{"size":676,"mtime":1680014790728,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1679519325616,"results":"18","hashOfConfig":"17"},{"size":1551,"mtime":1679950492878,"results":"19","hashOfConfig":"17"},{"size":2323,"mtime":1679519325601,"results":"20","hashOfConfig":"17"},{"size":3979,"mtime":1680711704316,"results":"21","hashOfConfig":"17"},{"size":652,"mtime":1679519325616,"results":"22","hashOfConfig":"17"},{"size":5703,"mtime":1680801599678,"results":"23","hashOfConfig":"17"},{"size":1826,"mtime":1680879544323,"results":"24","hashOfConfig":"17"},{"size":4616,"mtime":1681150677725,"results":"25","hashOfConfig":"17"},{"size":1551,"mtime":1679951526256,"results":"26","hashOfConfig":"17"},{"size":1636,"mtime":1681133906318,"results":"27","hashOfConfig":"17"},{"size":874,"mtime":1681133153027,"results":"28","hashOfConfig":"17"},{"size":16223,"mtime":1682526773762,"results":"29","hashOfConfig":"17"},{"size":4227,"mtime":1681144051647,"results":"30","hashOfConfig":"17"},{"size":2885,"mtime":1681139848197,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"qdkuhp",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\index.js",[],[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedinCookie.js",["89","90","91"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedinCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t// {cookie === \"\" ? (\r\n\t\t// \t<div>\r\n\t\t// \t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1>\r\n\t\t// \t\t<button onClick={handleLinkedinCookie}>Get LinkedIn Cookies</button>\r\n\t\t// \t\t<AudioRetrieval />\r\n\t\t// \t</div>\r\n\t\t// ) : (\r\n\t\t// \t<div>\r\n\t\t// \t\t<button onClick={() => window.open( \"https://sak-productivity-suite.herokuapp.com/dashboard\") }>Open Dashboard</button>\r\n\t\t// \t\t<Route exact path=\"/dashboard\" element={<ProfileSearch />} />\r\n\t\t// \t</div>\r\n\t\t// )}\r\n\t\t<>\r\n\t\t<Router>\r\n\t\t\t<Route path=\"/dashboard\" element={<ProfileSearch />} />\t\t\t\r\n\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default LinkedinCookie;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\AudioRetrieval.js",["92"],[],"/*global chrome*/\r\nimport React, {useState, useEffect, useRef} from \"react\";\r\n\r\nfunction AudioRetrieval() {\r\n\t\r\n\tconst [transcriptTextArea, setTranscriptTextArea] = useState(\"\");\r\n\tconst transcriptTextAreaRef = useRef(null);\r\n\t\r\n\tconst handleStartCapture = () => {\r\n\t\t\r\n\t\tchrome.tabCapture.capture({audio: true}, function(stream) {\r\n\t\t\t\r\n\t\t\tconst audioContext = new AudioContext();\r\n\r\n\t\t\tconst mediaStreamSource = audioContext.createMediaStreamSource(stream);\r\n\t\t\tmediaStreamSource.connect(audioContext.destination);\r\n\r\n\t\t\t// Set up the speech recognition object\r\n\t\t\tconst SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\r\n\t\t\tconst recognition = new SpeechRecognition();\r\n\t\t\t\r\n\t\t\trecognition.continuous = true;\r\n\t\t\trecognition.interimResults = true;\r\n\t\t\trecognition.lang = 'en-US';\r\n\t\t\trecognition.listening = true;\r\n\t\t\t\r\n\t\t\trecognition.start();\r\n\r\n\t\t\t// Process the speech recognition results\r\n\t\t\trecognition.onresult = function(event) {\r\n\t\t\t\tlet eventText = \"\";\r\n\t\t\t\tfor (let i = 0; i < event.results.length; i++) {\r\n\t\t\t\t\teventText += event.results[i][0].transcript;\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(eventText);\r\n\t\t\t\ttranscriptTextAreaRef.current.value = eventText;\r\n\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t});\r\n\t\t\r\n\t};\r\n\t\r\n\tconst handleSendingToAI = async() => {\r\n\t\tconst prompt = \"This is a conversation with a person: \"\r\n\t\t+ \" Answer in a sentence or two. Do not be verbose: \" + transcriptTextAreaRef.current.value;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-chatgpt\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\t\r\n\t\t\tsetTranscriptTextArea(data.message);\t\t\t\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\t\t\r\n\tconst handleTranscriptTextAreaChange = (event) => {\r\n\t\tsetTranscriptTextArea(event.target.value);\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t<button onClick={handleStartCapture}>\r\n\t\t\tStart audio capture\r\n\t\t</button>\r\n\t\t<button onClick={handleSendingToAI}>\r\n\t\t\tSend to AI\r\n\t\t</button>\r\n\t\t<textarea ref={transcriptTextAreaRef} value={transcriptTextArea} onChange={handleTranscriptTextAreaChange} placeholder=\"The transcript will appear here\"></textarea>\r\n\t\t</>\r\n\t);\r\n\r\n}\r\nexport default AudioRetrieval;",[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ProfileSearch.js",["93","94"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nimport './ProfileSearch.css';\r\n\r\nfunction ProfileSearch(props) {\r\n\t\r\n\tconst {sessionId} = props;\r\n\t// console.log(\"ProfileSearch\", sessionId);\r\n\t\r\n\tconst [leadName, setLeadName] = useState(\"\");\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\tconst [currentCompany, setCurrentCompany] = useState(\"\");\r\n\t\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\t\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst navigate = useNavigate();\r\n\t\t\r\n\tconst handleSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/search-leads-in-db\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tleadName: leadName,\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tcurrentCompany: currentCompany,\r\n\t\t\t\t\tlocation: location\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tsetIsLoading(true);\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst resultArray = data.message;\r\n\r\n\t\t\tsetResultArray(resultArray);\t\r\n\t\t\tsetJobFinished(true);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{jobFinished === true ? (\r\n\t\t\t\tnavigate(\"/display-linkedin-search-results\", {state: {sessionId: sessionId, resultArray: resultArray} })\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"search-form-container\">\r\n\t\t\t\t\t\t<Form className=\"search-form\">\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter name\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={leadName}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLeadName(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe name you want to search (Optional)\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter position\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe position you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formCurrentCompany\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter current company\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\t\t\tvalue={currentCompany}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setCurrentCompany(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tWhich company's employees do you want to search?\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formLocation\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Enter location\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={location} \r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLocation(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe location you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"button\" onClick={handleSearchRequest}>\r\n\t\t\t\t\t\t\t\t{isLoading ? 'Results Loading...' : 'Search'}\r\n\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n}\r\nexport default ProfileSearch;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\CheckJobStatus.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplaySearchResults.js",["95"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction DisplaySearchResults() {\r\n\t\r\n\tconst location = useLocation();\r\n\tconst sessionId = location.state?.sessionId;\r\n\tconst resultArray = location.state?.resultArray;\r\n\t// console.log(\"DisplaySearchResults sessionId: \", sessionId);\r\n\t\r\n\t// TODO: get this information, for now backend is not returning it\r\n\t// const [summary, setSummary] = useState(\"\");\r\n\t// const [skills, setSkills] = useState(\"\");\r\n\t\r\n\t// TODO: May come a time where results are more than 50, will cause error\r\n\t// Solution: have useEffect and check the length of the resultArray before allocating array size\r\n\tconst [peopleInterestsArray, setPeopleInterestsArray] = useState(Array.from({length: 50}, () => []));\r\n\tconst [companyInterestsArray, setCompanyInterestsArray] = useState(Array.from({length: 50}, () => []));\r\n\t// const [activityInterestsArray, setActivityInterestsArray] = useState([]);\r\n\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst [showProfileArea, setShowProfileArea] = useState(false);\r\n\tconst [profileInfoArray, setProfileInfoArray] = useState([]);\r\n\t\t\r\n\tuseEffect(() => {\r\n\t\tsetProfileInfoArray(resultArray);\r\n\t}, [resultArray]);\t\r\n\t\t\r\n\tconst handleGettingPeopleInterests = async (sessionId, profileUrnStr, index) => {\r\n\t\t\r\n\t\t// setIsLoading(true);\r\n\t\t\r\n\t\tconst startIndex = profileUrnStr.indexOf(\"(\") + 1;\r\n\t\tconst endIndex = profileUrnStr.indexOf(\",\");\r\n\t\tconst profileUrn = profileUrnStr.substring(startIndex, endIndex);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\t\t\t\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tconst newArray = [...peopleInterestsArray];\r\n\t\t\t\tfor (let i = 0; i < resultArray.length; i++){\r\n\t\t\t\t\tnewArray[index].push(resultArray[i]);\r\n\t\t\t\t}\r\n\t\t\t\tsetPeopleInterestsArray(newArray);\t\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleGettingCompanyInterests = async (sessionId, profileUrnStr, index) => {\r\n\t\t\r\n\t\t// setIsLoading(true);\r\n\r\n\t\tconst startIndex = profileUrnStr.indexOf(\"(\") + 1;\r\n\t\tconst endIndex = profileUrnStr.indexOf(\",\");\r\n\t\tconst profileUrn = profileUrnStr.substring(startIndex, endIndex);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tconst newArray = [...companyInterestsArray];\r\n\t\t\t\tfor (let i = 0; i < resultArray.length; i++){\r\n\t\t\t\t\tnewArray[index].push(resultArray[i]);\r\n\t\t\t\t}\r\n\t\t\t\tsetCompanyInterestsArray(newArray);\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\t// const handleGettingActivityInterests = () => {\r\n\t\t// // TODO\r\n\t// };\r\n\t\t\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<h1>Search Results:</h1>\r\n\t\t\t<ListGroup>\r\n\t\t\t\t\t{profileInfoArray.map((leadInfo, index) => (\r\n\t\t\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t{leadInfo[0]}, {leadInfo[1]} at {leadInfo[2]}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t{showProfileArea && (\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<ButtonGroup aria-label=\"Basic example\" className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\thandleGettingPeopleInterests(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\tGet people interests\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\thandleGettingCompanyInterests(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\tGet company interests\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</ButtonGroup>\r\n\r\n\t\t\t\t\t\t\t\t\t{peopleInterestsArray[index].length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple>\r\n\t\t\t\t\t\t\t\t\t\t\t{peopleInterestsArray[index].map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{companyInterestsArray[index].length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple>\r\n\t\t\t\t\t\t\t\t\t\t\t{companyInterestsArray[index].map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{/* {activityInterestsArray.length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{activityInterestsArray.map((interest) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option key={interest}>{interest[0]}</option>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)} */}\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t);\r\n}\r\nexport default DisplaySearchResults;\r\n","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayConvos.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayThread.js",["96","97"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\n\r\nfunction DisplayThread() {\r\n\r\n\tconst location = useLocation();\r\n\tconst sessionId = location.state?.sessionId;\r\n\tconst threadName = location.state?.threadName;\r\n\tconst threadId = location.state?.threadId;\r\n\r\n\tconst [isLoadingReply, setIsLoadingReply] = useState(null);\t\r\n\t\r\n\tconst [convoArray, setConvoArray] = useState([]);\r\n\tconst [replyTextArea, setReplyTextArea] = useState([]);\r\n\r\n\tuseEffect( () => {\r\n\t\t\r\n\t\tconst getSingleThread = async () => {\r\n\t\t\t// setIsLoadingThread(true);\r\n\t\t\tconst response = await fetch('https://sak-productivity-suite.herokuapp.com/get-convo-messages', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tthreadId: threadId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst thread = data.message;\r\n\t\t\tsetConvoArray(thread);\r\n\t\t\t// setIsLoadingThread(false);\r\n\t\t};\t\r\n\t\tgetSingleThread();\r\n\t\t// The 2 lines below deal with auto refresh of messages.\r\n\t\t// Run function every 5 seconds and clearInterval removes the timer after every 5 seconds. \r\n\t\t// This prevents memory leak.\r\n\t\tconst intervalId = setInterval(getSingleThread, 5000);\r\n\t\treturn () => clearInterval(intervalId);\r\n\t}, []);\r\n\t\r\n\tconst handleMakingReply = async() => {\r\n\t\tconst prompt = \"Reply to this: \" + convoArray;\r\n\t\ttry {\r\n\t\t\tsetIsLoadingReply(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-chatgpt\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tprompt: prompt\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tsetReplyTextArea(resultArray);\t\r\n\t\t\t\tsetIsLoadingReply(false);\r\n\t\t\t});\r\n\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleSendingMessage = async () => {\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-message\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileId: threadId,\r\n\t\t\t\t\ttext: replyTextArea\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(\"Successfully sent the message to the person\", data.message);\r\n\t\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleReplyTextAreaChange = (event) => {\r\n\t\tsetReplyTextArea(event.target.value);\r\n\t};\r\n\t\t\r\n\treturn (\r\n\t\t// <div>\r\n\t\t// \t{/* {isLoadingThread ? <p>Refreshing...</p> : <p>Conversation:</p>} */}\r\n        //     <h1>{threadName}</h1>\r\n\t\t// \t{convoArray.map( (message) => (\r\n\t\t// \t\t<p>{message[1]}: {message[0]}</p>\r\n\t\t// \t))}\r\n        //     {/* <textarea value={replyTextArea} onChange={handleReplyTextAreaChange}></textarea> */}\r\n\t\t// \t<Form.Group>\r\n\t\t// \t\t<Form.Control\r\n\t\t// \t\t\tas=\"textarea\"\r\n\t\t// \t\t\tvalue={replyTextArea} \r\n\t\t// \t\t\tonChange={ (event) => {\r\n\t\t// \t\t\t\thandleReplyTextAreaChange(event)\r\n\t\t// \t\t\t}}\r\n\t\t// \t\t/>\r\n\t\t// \t</Form.Group>\r\n        //     <button onClick={handleMakingReply}>Reply</button>\r\n        //     <button onClick={handleSendingMessage}>Send Message</button>\r\n\t\t// </div>\r\n\t\t<Container style={{ paddingTop: '20px', paddingBottom: '20px'}}>\r\n\t\t\t<Card>\r\n\t\t\t\t<Card.Header>\r\n\t\t\t\t<Card.Title>{threadName}</Card.Title>\r\n\t\t\t\t</Card.Header>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t{convoArray.map((message) => (\r\n\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t{message[1]}: {message[0]}\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t))}\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\tstyle={{ height: '150px' }}\r\n\t\t\t\t\tplaceholder=\"Type your message here\"\r\n\t\t\t\t\tvalue={replyTextArea}\r\n\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\thandleReplyTextAreaChange(event);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t\t<ButtonGroup aria-label=\"Basic example\" className=\"mb-2\">\r\n\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\thandleMakingReply()\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{isLoadingReply ? <p>Generating reply...</p> : <p>Generate Reply</p>}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={ () => {\r\n\t\t\t\t\t\thandleSendingMessage()\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\tSend Message\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t</Container>\r\n\t)\r\n}\r\nexport default DisplayThread;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\LinkedInCookie.js",["98","99","100"],[],"/*global chrome*/\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport ProfileSearch from \"./ProfileSearch.js\";\r\nimport AudioRetrieval from \"./AudioRetrieval.js\";\r\n\r\nfunction LinkedInCookie() {\r\n\t\r\n\tconst [cookie, setCookie] = useState(\"\");\r\n\t\r\n\tuseEffect( () => {\r\n\t\tchrome.storage.local.set({\r\n\t\t\t'LinkedinCookie': cookie\r\n\t\t});\r\n\t\r\n\t}, [cookie]);\t\r\n\t\t\r\n\tconst handleLinkedinCookie = () => {\r\n\t\t\r\n\t\tchrome.cookies.getAll({ url: \"https://www.linkedin.com/feed/\" }, (cookie) => {\r\n\t\t\t\t\t\r\n\t\t\tfetch(\"https://sak-productivity-suite.herokuapp.com/save-cookie\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcookie: cookie\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\t\r\n\t\t\t\tsetCookie(cookie);\r\n\t\t\t\t\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t// {cookie === \"\" ? (\r\n\t\t// \t<div>\r\n\t\t// \t\t<h1>MAKE SURE YOU ARE LOGGED IN TO LINKEDIN BEFORE CLICKING BELOW</h1>\r\n\t\t// \t\t<button onClick={handleLinkedinCookie}>Get LinkedIn Cookies</button>\r\n\t\t// \t\t<AudioRetrieval />\r\n\t\t// \t</div>\r\n\t\t// ) : (\r\n\t\t// \t<div>\r\n\t\t// \t\t<button onClick={() => window.open( \"https://sak-productivity-suite.herokuapp.com/dashboard\") }>Open Dashboard</button>\r\n\t\t// \t\t<Route exact path=\"/dashboard\" element={<ProfileSearch />} />\r\n\t\t// \t</div>\r\n\t\t// )}\r\n\t\t<>\r\n\t\t<Router>\r\n\t\t\t<Route path=\"/dashboard\" element={<ProfileSearch />} />\t\t\t\r\n\t\t</Router>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default LinkedInCookie;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\App.js",["101"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { Routes, Route, useLocation} from 'react-router-dom';\r\nimport Home from \"./Home\";\r\nimport DisplayConvos from './DisplayConvos';\r\nimport ProfileSearch from './ProfileSearch';\r\nimport NavbarComponent from './NavbarComponent';\r\nimport DisplaySearchResults from \"./DisplaySearchResults\";\r\nimport DisplayThread from \"./DisplayThread\";\r\nimport ZoomInfoSearch from \"./ZoomInfoSearch\";\r\nimport DisplayZoomInfoSearchResults from \"./DisplayZoomInfoSearchResults\";\r\n\r\nfunction App() {\r\n\r\n    const { search } = useLocation();\r\n    const [sessionId, setSessionId] = useState(\"\");\r\n\r\n    const val = search.split(\"=\")[1];\r\n    useEffect(() => {\r\n\t\tsetSessionId(val);\r\n\t}, []);\r\n\r\n    return (\r\n        <>\r\n        <NavbarComponent />\r\n        <Routes>\r\n            {sessionId && <Route path=\"/\" element={<Home sessionId={sessionId} />} /> }\r\n\r\n            {sessionId && <Route path=\"/linkedin-search\" element={<ProfileSearch sessionId={sessionId} />} /> }\r\n            <Route path=\"/display-linkedin-search-results\" element={<DisplaySearchResults />} /> \r\n            \r\n            {sessionId && <Route path=\"/display-thread\" element={<DisplayThread />} /> }\r\n            {sessionId && <Route path=\"/linkedin-messages\" element={<DisplayConvos sessionId={sessionId} />} /> }\r\n\r\n            {sessionId && <Route path=\"/zoominfo-search\" element={<ZoomInfoSearch sessionId={sessionId} />} /> }\r\n            <Route path=\"/display-zoominfo-search-results\" element={<DisplayZoomInfoSearchResults />} /> \r\n            \r\n            \r\n        </Routes>\r\n        </>\r\n    );\r\n}\r\nexport default App;  ","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\NavbarComponent.js",[],[],"C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\Home.js",["102","103","104","105"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport './Home.css';\r\n\r\nfunction Home(props) {\r\n\tconst {sessionId} = props;\r\n\t// console.log(\"Home sessionId: \", sessionId);\r\n\r\n\tconst [isLoadingLeads, setIsLoadingLeads] = useState(false);\r\n\tconst [isLoadingAutoCreatingNotes, setIsLoadingAutoCreatingNotes] = useState(false);\r\n\tconst [isLoadingPeopleInterests, setIsLoadingPeopleInterests] = useState(Array.from({length: 25}, () => false));\r\n\tconst [isLoadingCompanyInterests, setIsLoadingCompanyInterests] = useState(Array.from({length: 25}, () => false));\r\n\tconst [isLoadingMakingNote, setIsLoadingMakingNote] = useState(Array.from({length: 25}, () => false));\r\n\tconst [isLoadingSendingNote, setIsLoadingSendingNote] = useState(Array.from({length: 25}, () => false));\r\n\t\t\r\n\tconst [peopleInterestsArray, setPeopleInterestsArray] = useState(Array.from({length: 25}, () => []));\r\n\tconst [companyInterestsArray, setCompanyInterestsArray] = useState(Array.from({length: 25}, () => []));\r\n\tconst [selectedInterests, setSelectedInterests] = useState(Array.from({length: 25}, () => []));\r\n\r\n\tconst [showProfileArea, setShowProfileArea] = useState(false);\r\n\r\n\tconst [leadsArray, setLeadsArray] = useState([]);\r\n\tconst [memberUrnIdArray, setMemberUrnIdArray] = useState([]);\r\n\r\n\tconst [showCreateConnectNoteButton, setShowCreateConnectNoteButton] = useState(false);\r\n\tconst [connectNoteArray, setConnectNoteArray] = useState([]);\r\n\r\n\tconst [autoCreatingNotesDisabled, setAutoCreatingNotesDisabled] = useState(false);\r\n\t\t\r\n\tconst handleGettingLeads = async() => {\r\n        try {\r\n\t\t\tsetIsLoadingLeads(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-leads\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst leadsArray = data.lead_list;\r\n\t\t\t// console.log(\"Successfully gotten leads: \", data);\r\n\t\t\tconst memberUrnIdArray = data.member_urn_id_list; \r\n\r\n\t\t\tsetLeadsArray(leadsArray);\r\n\t\t\tsetMemberUrnIdArray(memberUrnIdArray);\r\n\t\t\tsetShowCreateConnectNoteButton(true);\r\n\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}finally {\r\n\t\t\tsetIsLoadingLeads(false);\r\n\t\t}\r\n\t};\r\n\r\n\t// This button goes through the lead list and creates a Connect note for them\r\n\tconst handleAutoCreatingNotes = async(sessionId, memberUrnId) => {\r\n\t\ttry {\r\n\t\t\tsetIsLoadingAutoCreatingNotes(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-lead-info\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tleadsArray: leadsArray,\r\n\t\t\t\t\tmemberUrnIdArray: memberUrnIdArray\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconst jobId = await response.json();\r\n\t\t\tCheckJobStatus(jobId.message, (resultArray) => {\r\n\t\t\t\tsetConnectNoteArray(resultArray);\r\n\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\tconsole.log(\"Successfully gotten Connect note array: \", resultArray);\r\n\t\t\t\tsetIsLoadingAutoCreatingNotes(false);\r\n\t\t\t});\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleGettingPeopleInterests = async (sessionId, profileUrnStr, index) => {\r\n\t\tconst startIndex = profileUrnStr.indexOf(\"(\") + 1;\r\n\t\tconst endIndex = profileUrnStr.indexOf(\",\");\r\n\t\tconst profileUrn = profileUrnStr.substring(startIndex, endIndex);\r\n\t\ttry {\r\n\r\n\t\t\t// setIsLoadingPeopleInterests(true);\r\n\t\t\t\r\n\t\t\tconst newIsLoadingPeopleInterests = [...isLoadingPeopleInterests];\r\n\t\t\tfor (let i = 0; i < newIsLoadingPeopleInterests.length; i++){\r\n\t\t\t\tnewIsLoadingPeopleInterests[index] = true;\r\n\t\t\t}\r\n\t\t\tsetIsLoadingPeopleInterests(newIsLoadingPeopleInterests);\r\n\r\n\t\t\tsetAutoCreatingNotesDisabled(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-people-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconst data = await response.json();\t\t\t\r\n\t\t\tconst jobId = data.message;\r\n\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tconst newArray = [...peopleInterestsArray];\r\n\t\t\t\tfor (let i = 0; i < resultArray.length; i++){\r\n\t\t\t\t\tnewArray[index].push(resultArray[i]);\r\n\t\t\t\t}\r\n\t\t\t\tsetPeopleInterestsArray(newArray);\r\n\r\n\t\t\t\t// setIsLoadingPeopleInterests(false);\r\n\t\t\t\tconst newIsLoadingPeopleInterests = [...isLoadingPeopleInterests];\r\n\t\t\t\tfor (let i = 0; i < newIsLoadingPeopleInterests.length; i++){\r\n\t\t\t\t\tnewIsLoadingPeopleInterests[index] = false;\r\n\t\t\t\t}\r\n\t\t\t\tsetIsLoadingPeopleInterests(newIsLoadingPeopleInterests);\r\n\t\t\t\t\r\n\t\t\t\tsetAutoCreatingNotesDisabled(false);\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleGettingCompanyInterests = async (sessionId, profileUrnStr, index) => {\r\n\t\tconst startIndex = profileUrnStr.indexOf(\"(\") + 1;\r\n\t\tconst endIndex = profileUrnStr.indexOf(\",\");\r\n\t\tconst profileUrn = profileUrnStr.substring(startIndex, endIndex);\r\n\t\ttry {\r\n\t\t\t// setIsLoadingCompanyInterests(true);\r\n\t\t\t\r\n\t\t\tconst newIsLoadingCompanyInterests = [...isLoadingCompanyInterests];\r\n\t\t\tfor (let i = 0; i < newIsLoadingCompanyInterests.length; i++){\r\n\t\t\t\tnewIsLoadingCompanyInterests[index] = true;\r\n\t\t\t}\r\n\t\t\tsetIsLoadingCompanyInterests(newIsLoadingCompanyInterests);\r\n\t\t\t\r\n\t\t\tsetAutoCreatingNotesDisabled(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/get-company-interests\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileUrn: profileUrn\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst jobId = data.message;\r\n\t\t\t\r\n\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\tconst newArray = [...companyInterestsArray];\r\n\t\t\t\tfor (let i = 0; i < resultArray.length; i++){\r\n\t\t\t\t\tnewArray[index].push(resultArray[i]);\r\n\t\t\t\t}\r\n\t\t\t\tsetCompanyInterestsArray(newArray);\r\n\r\n\t\t\t\t// setIsLoadingCompanyInterests(false);\t\r\n\t\t\t\tconst newIsLoadingCompanyInterests = [...isLoadingCompanyInterests];\r\n\t\t\t\tfor (let i = 0; i < newIsLoadingCompanyInterests.length; i++){\r\n\t\t\t\t\tnewIsLoadingCompanyInterests[index] = false;\r\n\t\t\t\t}\r\n\t\t\t\tsetIsLoadingCompanyInterests(newIsLoadingCompanyInterests);\r\n\t\t\t\t\r\n\t\t\t\tsetAutoCreatingNotesDisabled(false);\r\n\t\t\t});\r\n\t\t\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\t\t\t\r\n\tconst handleInterestsSelection = (index) => (event) => {\r\n\t\tconst newArray = [...selectedInterests];\r\n\t\tconst value = event.target.value;\r\n\t\tconst isChecked = event.target.checked;\r\n\t\tif (isChecked) {\r\n\t\t  newArray[index].push(value);\r\n\t\t} else {\r\n\t\t  const indexToRemove = newArray[index].indexOf(value);\r\n\t\t  newArray[index].splice(indexToRemove, 1);\r\n\t\t}\r\n\t\tsetSelectedInterests(newArray);\r\n\t};\r\n\r\n\t// ================ Create and Send Connect Note(s) ===============================\r\n\tconst handleMakingConnectNote = async (fullName, index) => {\r\n\t\tconsole.log(selectedInterests);\r\n\t\tconsole.log(selectedInterests[index]);\r\n\r\n\t\tif (selectedInterests[index].length !== 0){\r\n\t\t\tconst prompt = \"You are an Account Executive. This is the profile of a person: \" + fullName\r\n\t\t\t+ \" These are their interests: \" + selectedInterests[index].toString()\r\n\t\t\t+ \" Write a request to connect with them. Make it casual but eyecatching. Use only 50 words.\";\r\n\t\t\tconsole.log(prompt);\r\n\t\t\ttry {\r\n\t\t\t\t// setIsLoadingMakingNote(true);\r\n\t\t\t\tconst newIsLoadingMakingNote = [...isLoadingMakingNote];\r\n\t\t\t\tfor (let i = 0; i < newIsLoadingMakingNote.length; i++){\r\n\t\t\t\t\tnewIsLoadingMakingNote[index] = true;\r\n\t\t\t\t}\r\n\t\t\t\tsetIsLoadingMakingNote(newIsLoadingMakingNote);\r\n\r\n\t\t\t\tsetAutoCreatingNotesDisabled(true);\r\n\t\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-chatgpt\", {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tprompt: prompt\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tconst jobId = data.message;\r\n\t\r\n\t\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\t\tconst newArray = [...connectNoteArray];\r\n\t\t\t\t\tnewArray[index] = resultArray;\r\n\t\t\t\t\tsetConnectNoteArray(newArray);\r\n\r\n\t\t\t\t\t// setIsLoadingMakingNote(false);\r\n\t\t\t\t\tconst newIsLoadingMakingNote = [...isLoadingMakingNote];\r\n\t\t\t\t\tfor (let i = 0; i < newIsLoadingMakingNote.length; i++){\r\n\t\t\t\t\t\tnewIsLoadingMakingNote[index] = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetIsLoadingMakingNote(newIsLoadingMakingNote);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsetAutoCreatingNotesDisabled(false);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t}catch(error){\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst prompt = \"You are a Account Executive. This is the profile of a person: \" + fullName\r\n\t\t\t+ \" Write a request to connect with them. Make it casual but eyecatching. Use only 50 words.\";\t\r\n\t\t\tconsole.log(\"Not selected\", prompt);\r\n\t\t\ttry {\r\n\t\t\t\t// setIsLoadingMakingNote(true);\r\n\t\t\t\tconst newIsLoadingMakingNote = [...isLoadingMakingNote];\r\n\t\t\t\tfor (let i = 0; i < newIsLoadingMakingNote.length; i++){\r\n\t\t\t\t\tnewIsLoadingMakingNote[index] = true;\r\n\t\t\t\t}\r\n\t\t\t\tsetIsLoadingMakingNote(newIsLoadingMakingNote);\r\n\r\n\t\t\t\tsetAutoCreatingNotesDisabled(true);\r\n\t\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/use-chatgpt\", {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tprompt: prompt\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tconst jobId = data.message;\r\n\t\r\n\t\t\t\tCheckJobStatus(jobId, (resultArray) => {\r\n\t\t\t\t\tconst newArray = [...connectNoteArray];\r\n\t\t\t\t\tnewArray[index] = resultArray;\r\n\t\t\t\t\tsetConnectNoteArray(newArray);\t\r\n\r\n\t\t\t\t\t// setIsLoadingMakingNote(false);\r\n\t\t\t\t\tconst newIsLoadingMakingNote = [...isLoadingMakingNote];\r\n\t\t\t\t\tfor (let i = 0; i < newIsLoadingMakingNote.length; i++){\r\n\t\t\t\t\t\tnewIsLoadingMakingNote[index] = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetIsLoadingMakingNote(newIsLoadingMakingNote);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsetAutoCreatingNotesDisabled(false);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t}catch(error){\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleSendingConnectNote = async (sessionId, profileId, index) => {\r\n\t\ttry {\r\n\r\n\t\t\t// setIsLoadingSendingNote(true);\r\n\t\t\tconst newIsLoadingSendingNote = [...isLoadingSendingNote];\r\n\t\t\tfor (let i = 0; i < newIsLoadingSendingNote.length; i++){\r\n\t\t\t\tnewIsLoadingSendingNote[index] = true;\r\n\t\t\t}\r\n\t\t\tsetIsLoadingSendingNote(newIsLoadingSendingNote);\r\n\t\t\t\r\n\t\t\tsetAutoCreatingNotesDisabled(true);\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/send-connect\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tsessionId: sessionId,\r\n\t\t\t\t\tprofileId: profileId,\r\n\t\t\t\t\ttext: connectNoteArray[index]\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconsole.log(\"Successfully sent the connect note to the person\", data.message);\r\n\t\t\t\r\n\t\t}catch(error){\r\n\t\t\tconsole.log(error);\r\n\t\t} finally {\r\n\t\t\t// setIsLoadingSendingNote(false);\r\n\t\t\tconst newIsLoadingSendingNote = [...isLoadingSendingNote];\r\n\t\t\tfor (let i = 0; i < newIsLoadingSendingNote.length; i++){\r\n\t\t\t\tsetIsLoadingSendingNote[index] = false;\r\n\t\t\t}\r\n\t\t\tsetIsLoadingSendingNote(newIsLoadingSendingNote);\r\n\r\n\t\t\tsetAutoCreatingNotesDisabled(false);\r\n\t\t}\r\n\t};\r\n\t// ================ Create and Send Connect Note(s) ===============================\r\n\r\n\tconst handleNoteTextAreaChange = (event, index) => {\r\n\t\tconst updatedConnectNoteArray = [...connectNoteArray];\r\n\t\tupdatedConnectNoteArray[index] = event.target.value;\r\n\t\tsetConnectNoteArray(updatedConnectNoteArray);\r\n\t};\t  \r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t{/* <div style={{ padding: '20px' }}> */}\r\n\t\t\t<div style={{ display: 'flex', justifyContent: 'center', padding: '20px'}}>\r\n\t\t\t\t<Button className=\"myButton\" variant=\"primary\" type=\"button\" onClick={handleGettingLeads} disabled={isLoadingLeads}>\r\n\t\t\t\t\t{isLoadingLeads ? \r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Spinner animation=\"border\" size=\"sm\" />\r\n\t\t\t\t\t\t\t Getting Leads...\r\n\t\t\t\t\t\t</> : 'Get Leads'}\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t{showCreateConnectNoteButton && <Button className=\"myButton\" variant=\"primary\" type=\"button\" onClick={() => handleAutoCreatingNotes(sessionId, leadsArray[0][4])} style={{marginLeft: '10px'}} disabled={autoCreatingNotesDisabled}>\r\n\t\t\t\t\t{isLoadingAutoCreatingNotes ? \r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Spinner animation=\"border\" size=\"sm\" />\r\n\t\t\t\t\t\t Creating Notes...\r\n\t\t\t\t\t</>: 'Auto Create notes for all leads'}\r\n\t\t\t\t</Button>}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"mx-auto\" style={{ maxWidth: \"800px\", paddingBottom: '20px'}}>\r\n\t\t\t\t<Accordion alwaysOpen>\r\n\t\t\t\t\t{leadsArray.map((leadInfo, index) => (\r\n\t\t\t\t\t\t<Accordion.Item eventKey = {index.toString()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Accordion.Header>{leadInfo[0]}, {leadInfo[1]}</Accordion.Header>\r\n\t\t\t\t\t\t\t<Accordion.Body>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={connectNoteArray[index]} \r\n\t\t\t\t\t\t\t\t\t\t\tonChange={ (event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleNoteTextAreaChange(event, index)\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t<div style={{ display: 'flex', justifyContent: 'center', padding: '20px'}} >\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<Button className=\"myButton\" onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleGettingPeopleInterests(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t\t}} disabled={isLoadingPeopleInterests[index]} style={{marginLeft: '10px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{isLoadingPeopleInterests[index] ? \r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Spinner animation=\"border\" size=\"sm\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Loading...\r\n\t\t\t\t\t\t\t\t\t\t\t\t</>: 'Get people interests'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>{' '}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<Button className=\"myButton\" onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleGettingCompanyInterests(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t\t}} disabled={isLoadingCompanyInterests[index]} style={{marginLeft: '20px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{isLoadingCompanyInterests[index] ? \r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Spinner animation=\"border\" size=\"sm\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Loading...\r\n\t\t\t\t\t\t\t\t\t\t\t\t</> : 'Get company interests'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>{' '}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<Button className=\"myButton\" onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleMakingConnectNote(leadInfo[0], index)\r\n\t\t\t\t\t\t\t\t\t\t\t}} disabled={isLoadingMakingNote[index]} style={{marginLeft: '30px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{isLoadingMakingNote[index] ? \r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Spinner animation=\"border\" size=\"sm\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Making note...\r\n\t\t\t\t\t\t\t\t\t\t\t\t</> : 'Make Connect Note'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>{' '}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<Button className=\"myButton\" onClick={ () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleSendingConnectNote(sessionId, leadInfo[4], index)\r\n\t\t\t\t\t\t\t\t\t\t\t}} disabled={isLoadingSendingNote[index]} style={{marginLeft: '40px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{isLoadingSendingNote[index] ? \r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Spinner animation=\"border\" size=\"sm\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Sending Connect Note...\r\n\t\t\t\t\t\t\t\t\t\t\t\t</> : 'Send Connect Note'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t{peopleInterestsArray[index].length > 0 && (\r\n\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t{peopleInterestsArray[index].map((interest, i) => (\r\n\t\t\t\t\t\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={interest[0]}\r\n\t\t\t\t\t\t\t\t\t\t\tlabel={interest[0]}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection(index)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t{companyInterestsArray[index].length > 0 && (\r\n\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t{companyInterestsArray[index].map((interest, i) => (\r\n\t\t\t\t\t\t\t\t\t\t<Form.Check\r\n\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={interest[0]}\r\n\t\t\t\t\t\t\t\t\t\t\tlabel={interest[0]}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleInterestsSelection(index)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Accordion.Body>\r\n\t\t\t\t\t\t</Accordion.Item>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Accordion>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\nexport default Home;","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\DisplayZoomInfoSearchResults.js",["106","107","108"],[],"import React, {useState, useEffect} from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\nfunction DisplayZoomInfoSearchResults() {\r\n\t\r\n\tconst location = useLocation();\r\n\tconst resultArray = location.state?.resultArray;\r\n    console.log(\"DisplayZoomInfoSearchResults resultArray: \", resultArray);\r\n\t\t\r\n\tconst [showProfileArea, setShowProfileArea] = useState(false);\r\n\tconst [profileInfoArray, setProfileInfoArray] = useState([]);\r\n\t\t\r\n\tuseEffect(() => {\r\n\t\tsetProfileInfoArray(resultArray);\r\n\t}, [resultArray]);\t\r\n\t\t\r\n\t\t\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<h1>Search Results:</h1>\r\n\t\t\t<ListGroup>\r\n\t\t\t\t\t{profileInfoArray.map((companyInfo, index) => (\r\n\t\t\t\t\t\t<ListGroup.Item\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetShowProfileArea(true);\r\n\t\t\t\t\t\t\t}}>\r\n                            <h1>{companyInfo.name}</h1>\r\n                            <p>{companyInfo.city}, {companyInfo.country}</p>\r\n                            <p>{companyInfo.descriptionList[0].description}</p>\r\n\t\t\t\t\t\t\t<p>Employee Count: {companyInfo.employeeCount}</p>\r\n                            <p>Revenue Range: {companyInfo.revenueRange}</p>\r\n                            <p>Website: <a href={\"//\" + companyInfo.website} target=\"_blank\">Link</a></p>\r\n                            <Accordion>\r\n                                <Accordion.Item eventKey=\"0\">\r\n                                    <Accordion.Header>Business model</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.businessModel.map((model, index) => (\r\n                                                <li key={index}>{model}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                <Accordion.Item eventKey=\"1\">\r\n                                    <Accordion.Header>Competitors</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.competitors.map((competitor, index) => (\r\n                                                <li key={index}>{competitor.name}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                <Accordion.Item eventKey=\"2\">\r\n                                    <Accordion.Header>Primary Industries</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.primaryIndustry.map((industry, index) => (\r\n                                                <li key={index}>{industry}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                <Accordion.Item eventKey=\"3\">\r\n                                    <Accordion.Header>Sub Unit Industries</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <ul>\r\n                                            {companyInfo.subUnitIndustries.map((industry, index) => (\r\n                                                <li key={index}>{industry}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                            </Accordion>\r\n  \r\n\t\t\t\t\t\t\t{/* {showProfileArea && (\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)} */}\r\n\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t);\r\n}\r\nexport default DisplayZoomInfoSearchResults;\r\n","C:\\Users\\farha\\OneDrive\\Documents\\sak-productivity-suite\\client\\src\\ZoomInfoSearch.js",["109","110","111","112"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {CheckJobStatus} from \"./CheckJobStatus.js\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nimport './ProfileSearch.css';\r\n\r\nfunction ZoomInfoSearch() {\r\n\t\r\n\t// const {sessionId} = props;\r\n\t// console.log(\"ProfileSearch\", sessionId);\r\n\t\r\n\tconst [companyName, setCompanyName] = useState(\"\");\r\n\tconst [location, setLocation] = useState(\"\");\r\n\t\r\n\tconst [jobFinished, setJobFinished] = useState(false);\r\n\tconst [resultArray, setResultArray] = useState([]);\r\n\t\t\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst navigate = useNavigate();\r\n\t\t\r\n\tconst handleZoomInfoSearchRequest = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://sak-productivity-suite.herokuapp.com/search-zoominfo\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcompanyName: companyName\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tsetIsLoading(true);\r\n\t\t\t\r\n\t\t\tconst data = await response.json();\r\n\t\t\t// console.log(data);\r\n\t\t\tconst resultArray = data['data']['result'][0]['data'];\r\n\t\t\t// console.log(resultArray);\r\n\r\n\t\t\tsetResultArray(resultArray);\t\r\n\t\t\tsetJobFinished(true);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{jobFinished === true ? (\r\n\t\t\t\tnavigate(\"/display-zoominfo-search-results\", {state: {resultArray: resultArray} })\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"search-form-container\">\r\n\t\t\t\t\t\t<Form className=\"search-form\">\r\n\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formPosition\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\tlabel=\"Enter Company name\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={companyName}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setCompanyName(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tCompany name you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t\t{/* <Form.Group className=\"mb-3\" controlId=\"formLocation\">\r\n\t\t\t\t\t\t\t\t<FloatingLabel \r\n\t\t\t\t\t\t\t\t\t\tcontrolId=\"floatingInput\" \r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Enter location\"\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"mb-3\" >\r\n\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={location} \r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLocation(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t\t\t\t\t\t\tThe location you want to search\r\n\t\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t\t</Form.Group> */}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"button\" onClick={handleZoomInfoSearchRequest}>\r\n\t\t\t\t\t\t\t\t{isLoading ? 'Results Loading...' : 'Search'}\r\n\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\t\t\r\n\t\t</>\r\n\t);\r\n}\r\nexport default ZoomInfoSearch;",{"ruleId":"113","severity":1,"message":"114","line":3,"column":35,"nodeType":"115","messageId":"116","endLine":3,"endColumn":41},{"ruleId":"113","severity":1,"message":"117","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":22},{"ruleId":"113","severity":1,"message":"118","line":18,"column":8,"nodeType":"115","messageId":"116","endLine":18,"endColumn":28},{"ruleId":"113","severity":1,"message":"119","line":2,"column":26,"nodeType":"115","messageId":"116","endLine":2,"endColumn":35},{"ruleId":"113","severity":1,"message":"119","line":1,"column":26,"nodeType":"115","messageId":"116","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"120","line":2,"column":9,"nodeType":"115","messageId":"116","endLine":2,"endColumn":23},{"ruleId":"113","severity":1,"message":"121","line":26,"column":9,"nodeType":"115","messageId":"116","endLine":26,"endColumn":18},{"ruleId":"113","severity":1,"message":"122","line":8,"column":23,"nodeType":"115","messageId":"116","endLine":8,"endColumn":32},{"ruleId":"123","severity":1,"message":"124","line":48,"column":5,"nodeType":"125","endLine":48,"endColumn":7,"suggestions":"126"},{"ruleId":"113","severity":1,"message":"114","line":3,"column":35,"nodeType":"115","messageId":"116","endLine":3,"endColumn":41},{"ruleId":"113","severity":1,"message":"117","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":22},{"ruleId":"113","severity":1,"message":"118","line":18,"column":8,"nodeType":"115","messageId":"116","endLine":18,"endColumn":28},{"ruleId":"123","severity":1,"message":"127","line":20,"column":5,"nodeType":"125","endLine":20,"endColumn":7,"suggestions":"128"},{"ruleId":"113","severity":1,"message":"119","line":1,"column":26,"nodeType":"115","messageId":"116","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"129","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":21},{"ruleId":"113","severity":1,"message":"130","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":17},{"ruleId":"113","severity":1,"message":"131","line":27,"column":9,"nodeType":"115","messageId":"116","endLine":27,"endColumn":24},{"ruleId":"113","severity":1,"message":"129","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":21},{"ruleId":"113","severity":1,"message":"131","line":13,"column":9,"nodeType":"115","messageId":"116","endLine":13,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":35,"column":41,"nodeType":"134","messageId":"135","endLine":35,"endColumn":94,"fix":"136"},{"ruleId":"113","severity":1,"message":"119","line":1,"column":26,"nodeType":"115","messageId":"116","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"120","line":2,"column":9,"nodeType":"115","messageId":"116","endLine":2,"endColumn":23},{"ruleId":"113","severity":1,"message":"137","line":17,"column":9,"nodeType":"115","messageId":"116","endLine":17,"endColumn":17},{"ruleId":"113","severity":1,"message":"138","line":17,"column":19,"nodeType":"115","messageId":"116","endLine":17,"endColumn":30},"no-unused-vars","'Routes' is defined but never used.","Identifier","unusedVar","'AudioRetrieval' is defined but never used.","'handleLinkedinCookie' is assigned a value but never used.","'useEffect' is defined but never used.","'CheckJobStatus' is defined but never used.","'isLoading' is assigned a value but never used.","'ListGroup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sessionId' and 'threadId'. Either include them or remove the dependency array.","ArrayExpression",["139"],"React Hook useEffect has a missing dependency: 'val'. Either include it or remove the dependency array.",["140"],"'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'showProfileArea' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"141","text":"142"},"'location' is assigned a value but never used.","'setLocation' is assigned a value but never used.",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},[1362,1362]," rel=\"noreferrer\"","Update the dependencies array to be: [sessionId, threadId]",{"range":"147","text":"148"},"Update the dependencies array to be: [val]",{"range":"149","text":"150"},[1624,1626],"[sessionId, threadId]",[718,720],"[val]"]